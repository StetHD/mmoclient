package net.packet{	import flash.net.Socket;	import flash.system.*;	import flash.utils.Endian;	import flash.utils.ByteArray;			public class Packet 	{		//Packet identifier		public static var LOGIN:int = 1;		public static var LOGOUT:int = 2;		public static var CLOCKSYNC:int = 3;		public static var CLIENTREADY:int = 4;		public static var PLAYER_ID:int = 5;		public static var INFO_KINGDOM:int = 6;		public static var CHAT_MSG:int = 7;		public static var SUCCESS:int = 20;		public static var EXPLORED_MAP:int = 39;		public static var PERCEPTION:int = 40;		public static var MOVE:int = 42;		public static var ATTACK:int = 43;			public static var REQUEST_INFO:int = 50;		public static var INFO_TILE:int = 52;				public static var INFO_ARMY:int = 53; 		public static var INFO_CITY:int = 54; 		public static var INFO_UNIT_QUEUE:int = 55;		public static var INFO_GENERIC_ARMY:int = 56;		public static var INFO_GENERIC_CITY:int = 57;		public static var INFO_ITEM_RECIPE:int = 58;		public static var BATTLE_INFO:int = 70;		public static var BATTLE_EVENT:int = 71;		public static var BATTLE_DAMAGE:int = 74;		public static var BATTLE_TARGET:int = 75;		public static var BATTLE_RETREAT:int = 76;		public static var BATTLE_LEAVE:int = 77;		public static var CITY_FORM_ARMY:int = 99;		public static var CITY_QUEUE_UNIT:int = 100;						public static var CITY_QUEUE_BUILDING:int = 101;		public static var CITY_QUEUE_IMPROVEMENT:int = 102;				public static var CITY_CRAFT_ITEM:int = 103;		public static var CITY_UPDATE_TAX:int = 104;		public static var ADD_RECIPE:int = 120;		public static var ADD_UNIT_RECIPE:int = 121;		public static var ADD_CLAIM:int = 125;				public static var ASSIGN_TASK:int = 130;		public static var REMOVE_TASK:int = 131;		public static var TRANSFER_ITEM:int = 150;		public static var TRANSFER_UNIT:int = 155;				public static var BAD:int = 255;				//Errors		public static var ERR_BAD_LOGIN:int = 1;				public function Packet() : void		{		}							public static function sendClockSync(socket:Socket) : void		{			socket.writeByte(CLOCKSYNC);			socket.flush();					}				public static function sendLogin(socket:Socket, account:String, password:String) : void		{			socket.writeByte(LOGIN);			socket.writeUTF(account);					socket.writeUTF(password);					socket.flush();				}				public static function sendClientReady(socket:Socket) : void		{			socket.writeByte(CLIENTREADY);			socket.flush();		}				public static function sendMove(socket:Socket, id:int, xPos:int, yPos:int) : void		{			trace("Packet - sendMove");			socket.writeByte(MOVE);			socket.writeInt(id);			socket.writeShort(xPos);			socket.writeShort(yPos);			socket.flush();		}				public static function sendAttack(socket:Socket, id:int, targetId:int) : void		{			trace("Packet - sendAttack");			socket.writeByte(ATTACK);			socket.writeInt(id);			socket.writeInt(targetId);			socket.flush();		}					public static function sendRequestInfo(socket:Socket, type:int, targetId:int) : void		{			trace("Packet - sendRequestInfo");			socket.writeByte(REQUEST_INFO);			socket.writeShort(type);			socket.writeInt(targetId);			socket.flush();		}				public static function sendCityFormArmy(socket:Socket, cityFormArmy:CityFormArmy) : void		{			trace("Packet - sendCityFormArmy");			socket.writeByte(CITY_FORM_ARMY);			socket.writeInt(cityFormArmy.cityId);			socket.writeUTF(cityFormArmy.armyName);			socket.flush();		}				public static function sendCityQueueUnit(socket:Socket, cityQueueUnit:CityQueueUnit) : void		{			trace("Packet - sendCityQueueUnit");			socket.writeByte(CITY_QUEUE_UNIT);			socket.writeInt(cityQueueUnit.cityId);			socket.writeInt(cityQueueUnit.buildingId);			socket.writeInt(cityQueueUnit.unitType);			socket.writeInt(cityQueueUnit.unitSize);			socket.writeByte(cityQueueUnit.caste);			socket.writeByte(cityQueueUnit.race);			socket.flush();		}				public static function sendCityQueueBuilding(socket:Socket, cityQueueBuilding:CityQueueBuilding) : void		{			trace("Packet - sendCityQueueBuilding");			socket.writeByte(CITY_QUEUE_BUILDING);			socket.writeInt(cityQueueBuilding.cityId);				socket.writeShort(cityQueueBuilding.buildingType);			socket.flush();		}				public static function sendCityQueueImprovement(socket:Socket, cityQueueImprovement:CityQueueImprovement) : void		{			trace("Packet - sendCityQueueImprovement");			socket.writeByte(CITY_QUEUE_IMPROVEMENT);			socket.writeInt(cityQueueImprovement.cityId);			socket.writeShort(cityQueueImprovement.x);			socket.writeShort(cityQueueImprovement.y);			socket.writeShort(cityQueueImprovement.type);			socket.flush();		}						public static function sendCityCraftItem(socket:Socket, cityCraftItem:CityCraftItem) : void		{			trace("Packet - sendCityCraftItem");			trace("sourceId: " + cityCraftItem.sourceId);			trace("sourceType: " + cityCraftItem.sourceType);			trace("itemType: " + cityCraftItem.itemType);			trace("itemSize: " + cityCraftItem.itemSize);						socket.writeByte(CITY_CRAFT_ITEM);			socket.writeInt(cityCraftItem.cityId);				socket.writeInt(cityCraftItem.sourceId);			socket.writeShort(cityCraftItem.sourceType);			socket.writeShort(cityCraftItem.itemType);			socket.writeInt(cityCraftItem.itemSize);			socket.flush();		}					public static function sendCityUpdateTax(socket:Socket, cityUpdateTax:CityUpdateTax) : void		{			socket.writeByte(CITY_UPDATE_TAX);			socket.writeInt(cityUpdateTax.cityId);			socket.writeShort(cityUpdateTax.taxes.length);						for(var i:int = 0; i < cityUpdateTax.taxes.length; i++)			{				socket.writeShort(cityUpdateTax.taxes[i].rate);				socket.writeShort(cityUpdateTax.taxes[i].type);				}			socket.flush();		}				public static function sendAddRecipe(socket:Socket, addRecipe:AddRecipe) : void		{			trace("Packet - sendAddRecipe");			socket.writeByte(ADD_RECIPE);			socket.writeInt(addRecipe.templateId);			socket.writeInt(addRecipe.playerId);			socket.writeUTF(addRecipe.itemName);			socket.writeUTF(addRecipe.flavourText);			socket.writeShort(addRecipe.materialType.length);						for(var i:int = 0; i < addRecipe.materialType.length; i++)			{				socket.writeInt(addRecipe.materialType[i]);			}						socket.flush();		}				public static function sendAddUnitRecipe(socket:Socket, addUnitRecipe:AddUnitRecipe) : void		{			trace("Packet - sendUnitRecipe");			trace("TemplateId: "  + addUnitRecipe.templateId);			socket.writeByte(ADD_UNIT_RECIPE);			socket.writeInt(addUnitRecipe.templateId);			socket.writeInt(addUnitRecipe.playerId);			socket.writeUTF(addUnitRecipe.unitName);			socket.writeInt(addUnitRecipe.defaultSize);			socket.writeShort(addUnitRecipe.gear.length);						for(var i:int = 0; i < addUnitRecipe.gear.length; i++)			{				socket.writeInt(addUnitRecipe.gear[i]);			}						socket.flush();		}				public static function sendTransferUnit(socket:Socket, transferUnit:TransferUnit) : void		{			trace("Packet - sendTransferUnit");			socket.writeByte(TRANSFER_UNIT);			socket.writeInt(transferUnit.unitId);			socket.writeInt(transferUnit.sourceId);			socket.writeShort(transferUnit.sourceType);			socket.writeInt(transferUnit.targetId);			socket.writeShort(transferUnit.targetType);			socket.flush();		}				public static function sendBattleTarget(socket:Socket, battleTarget:BattleTarget) : void		{			trace("Packet - sendBattleTarget");			socket.writeByte(BATTLE_TARGET);			socket.writeInt(battleTarget.battleId);			socket.writeInt(battleTarget.sourceArmyId);			socket.writeInt(battleTarget.sourceUnitId);			socket.writeInt(battleTarget.targetArmyId);			socket.writeInt(battleTarget.targetUnitId);			socket.flush();		}				public static function sendBattleRetreat(socket:Socket, battleRetreat:BattleRetreat) : void		{			trace("Packet - sendBattleRetreat");			socket.writeByte(BATTLE_RETREAT);			socket.writeInt(battleRetreat.battleId);			socket.writeInt(battleRetreat.armyId);			socket.flush();		}				public static function sendAddClaim(socket:Socket, addClaim:AddClaim) : void		{			trace("Packet - sendAddClaim");			socket.writeByte(ADD_CLAIM);			socket.writeInt(addClaim.cityId);			socket.writeInt(addClaim.armyId);			socket.writeShort(addClaim.x);			socket.writeShort(addClaim.y);			socket.flush();		}						public static function sendAssignTask(socket:Socket, assignTask:AssignTask) : void		{			trace("Packet - sendAssignTask");			socket.writeByte(ASSIGN_TASK);			socket.writeInt(assignTask.cityId);			socket.writeByte(assignTask.caste);			socket.writeByte(assignTask.race);			socket.writeInt(assignTask.amount);			socket.writeInt(assignTask.targetId);			socket.writeShort(assignTask.targetType);			socket.flush();		}				public static function sendRemoveTask(socket:Socket, removeTask:RemoveTask) : void		{			trace("Packet - sendRemoveTask");			socket.writeByte(REMOVE_TASK);			socket.writeInt(removeTask.cityId);			socket.writeInt(removeTask.assignmentId);			socket.flush();		}				public static function sendTransferItem(socket:Socket, transferItem:TransferItem) : void		{			trace("Packet - sendTransferItem");			socket.writeByte(TRANSFER_ITEM);			socket.writeInt(transferItem.itemId);			socket.writeInt(transferItem.sourceId);			socket.writeShort(transferItem.sourceType);			socket.writeInt(transferItem.targetId);			socket.writeShort(transferItem.targetType);			socket.flush();		}				public static function sendChatMsg(socket:Socket, chatMsg:ChatMsg) : void		{			trace("chatMsg: " + chatMsg.playerName);			trace("Packet - sendChatMsg");			socket.writeByte(CHAT_MSG);			socket.writeInt(chatMsg.playerId);			socket.writeUTF("Peter");			socket.writeUTF(chatMsg.msg);			socket.flush();		}				public static function readSuccess(byteArray:ByteArray) : Success		{			var success:Success = new Success();			success.type = byteArray.readUnsignedShort();			success.id = byteArray.readInt()						return success;		}				public static function readBad(byteArray:ByteArray) : String		{			var cmd:int = byteArray.readUnsignedByte();			var error:int = byteArray.readUnsignedByte();			var msg:String = "Command: " + Packet.getCmd(cmd) + " - Error: " + Packet.getError(error);								return msg;		}				public static function readInfoKingdom(byteArray:ByteArray) : InfoKingdom		{			trace("ByteArray.length: " + byteArray.length);						var infoKingdom:InfoKingdom = new InfoKingdom();			var recipes:Array = new Array();			var unitRecipes:Array = new Array();			var numRecipes:int;			var numUnitRecipes:int;						infoKingdom.id = byteArray.readInt();			infoKingdom.name = byteArray.readUTF();			infoKingdom.gold = byteArray.readInt();						numRecipes = byteArray.readUnsignedShort();						for(var i:int = 0; i < numRecipes; i++)			{				var recipe:RecipePacket = new RecipePacket();				var materialAmounts:Array = new Array();				var materialTypes:Array = new Array();				var numAmounts:int;				var numMaterials:int;								recipe.typeId = byteArray.readInt();				recipe.templateId = byteArray.readInt();				recipe.playerId = byteArray.readInt();				recipe.itemName = byteArray.readUTF();				recipe.flavourText = byteArray.readUTF();				recipe.materialAmount = new Array();								numAmounts = byteArray.readUnsignedShort();								for(var j:int = 0; j < numAmounts; j++)				{					var materialAmount:int = byteArray.readInt();										materialAmounts.push(materialAmount);				}								recipe.materialAmount = materialAmounts;								recipe.materialType = new Array();								numMaterials = byteArray.readUnsignedShort();								for(var j:int = 0; j < numMaterials; j++)				{					var materialType:int = byteArray.readInt();										materialTypes.push(materialType);				}								recipe.materialType = materialTypes;								recipes.push(recipe);			}						numUnitRecipes = byteArray.readUnsignedShort();					trace("numUnitRecipes: " + numUnitRecipes);						for(var i:int = 0; i < numUnitRecipes; i++)			{				var unitRecipe:UnitRecipe = new UnitRecipe();				var gear:Array = new Array();				var numGear:int;								unitRecipe.typeId = byteArray.readInt();				unitRecipe.templateId = byteArray.readInt();				unitRecipe.playerId = byteArray.readInt();				unitRecipe.unitName = byteArray.readUTF();				unitRecipe.defaultSize = byteArray.readInt();				unitRecipe.gear = new Array();								numGear = byteArray.readUnsignedShort();								for(var j:int = 0; j < numGear; j++)				{					var gearId:int = byteArray.readInt();										gear.push(gearId);				}								unitRecipe.gear = gear;				unitRecipes.push(unitRecipe);			}							trace("ByteArray.length: " + byteArray.length);								infoKingdom.itemRecipes = recipes;			infoKingdom.unitRecipes = unitRecipes;						return infoKingdom;		}				public static function readExploredMap(byteArray:ByteArray) : Array		{			var numTiles:int = byteArray.readInt();			var exploredMap/*MapTiles*/:Array = new Array();									for(var i:int = 0; i < numTiles; i++)			{							var mapTile:MapTile = new MapTile();								mapTile.index = byteArray.readInt();				mapTile.tile = byteArray.readUnsignedByte();								exploredMap.push(mapTile);			}						return exploredMap;		}				public static function readPerception(byteArray:ByteArray) : Perception		{			var perception:Perception = new Perception();			perception.mapObjects = new Array();			perception.mapTiles = new Array();						var numEntities:int = byteArray.readUnsignedShort();										trace("numEntities: " + numEntities);														for(var i = 0; i < numEntities; i++)			{				var mapObject:MapObject = new MapObject();								mapObject.id = byteArray.readInt();				mapObject.playerId = byteArray.readInt();				mapObject.type = byteArray.readUnsignedShort();				mapObject.subType = byteArray.readUnsignedShort();				mapObject.state = byteArray.readUnsignedShort();				mapObject.x = byteArray.readUnsignedShort();				mapObject.y = byteArray.readUnsignedShort();											perception.mapObjects.push(mapObject);			}									var numTiles:int = byteArray.readInt();						for(var i = 0; i < numTiles; i++)			{				var mapTile:MapTile = new MapTile();								mapTile.index = byteArray.readInt();				mapTile.tile = byteArray.readUnsignedByte();								perception.mapTiles.push(mapTile);			}						return perception;		}				public static function readChatMsg(byteArray:ByteArray) : ChatMsg		{			var chatMsg:ChatMsg = new ChatMsg();						chatMsg.playerId = byteArray.readInt();			chatMsg.playerName = byteArray.readUTF();			chatMsg.msg = byteArray.readUTF();						return chatMsg;		}				public static function readInfoTile(byteArray:ByteArray) : InfoTile		{					var infoTile:InfoTile = new InfoTile();			var resourceList/*Resource*/:Array = new Array();						infoTile.tileIndex = byteArray.readInt();			infoTile.tileType = byteArray.readUnsignedShort();						var numResources:int = byteArray.readUnsignedShort();						for (var i:int = 0; i < numResources; i++)			{					var resource:Resource = new Resource();				resource.id = byteArray.readInt();				resource.type = byteArray.readUnsignedShort();				resource.total = byteArray.readInt();				resource.regen_rate = byteArray.readInt();								resourceList.push(resource);			}						infoTile.resources = resourceList;						var claim:ClaimPacket = new ClaimPacket();						claim.id = byteArray.readInt();			claim.tileIndex = byteArray.readInt();			claim.cityId = byteArray.readInt();			claim.state = byteArray.readShort();			claim.createdTime = byteArray.readInt();						infoTile.claim = claim;						return infoTile;		}						public static function readInfoArmy(byteArray:ByteArray) : InfoArmy		{			var army:InfoArmy = new InfoArmy();			army.id = byteArray.readInt();			army.name = byteArray.readUTF();			army.units = new Array();						var numUnits:int = byteArray.readUnsignedShort();						for (var i:int = 0; i < numUnits; i++)			{				var unit:UnitPacket = new UnitPacket();				unit.id = byteArray.readInt();				unit.template_id = byteArray.readInt();				unit.size = byteArray.readInt();				unit.name = byteArray.readUTF();								unit.gear = new Array();								var numGear:int = byteArray.readUnsignedShort();								for(var j:int = 0; j < numGear; j++)				{					unit.gear.push(byteArray.readInt());				}												unit.items = new Array();								var numItems:int = byteArray.readUnsignedShort();								for(var j:int = 0; j < numItems; j++)				{					var item:ItemPacket = new ItemPacket();										item.id = byteArray.readInt();					item.ownerType = byteArray.readByte();					item.ownerId = byteArray.readInt();					item.playerId = byteArray.readInt();					item.type = byteArray.readShort();					item.template = byteArray.readInt();					item.volume = byteArray.readInt();									unit.items.push(item);				}								army.units.push(unit);			}						return army;		}				public static function readInfoCity(byteArray:ByteArray) : InfoCity		{						var infoCity:InfoCity = new InfoCity();						var buildingList:Array = new Array();						var unitList:Array = new Array();					var claimList:Array = new Array();			var improvementList:Array = new Array();			var assignmentList:Array = new Array();			var itemList:Array = new Array();			var populationList:Array = new Array();			var contractList:Array = new Array();						var i:int;						infoCity.id = byteArray.readInt();			infoCity.name = byteArray.readUTF();			infoCity.taxCommoner = byteArray.readInt();			infoCity.taxNoble = byteArray.readInt();			infoCity.taxTariff = byteArray.readInt();						var numBuildings:int = byteArray.readUnsignedShort();			trace("numBuildings: " + numBuildings);						for (i = 0; i < numBuildings; i++)			{					var buildingInfo:Object = { id: byteArray.readInt(),											hp: byteArray.readInt(),											type: byteArray.readUnsignedShort() };								buildingList.push(buildingInfo);			}									var numUnits:int = byteArray.readUnsignedShort();			trace("numUnits: " + numUnits);						for (i = 0; i < numUnits; i++)			{				var unit:UnitPacket = new UnitPacket();				unit.id = byteArray.readInt();				unit.template_id = byteArray.readInt();				unit.size = byteArray.readInt();				unit.name = byteArray.readUTF();								unit.gear = new Array();								var numGear:int = byteArray.readUnsignedShort();								for(var j:int = 0; j < numGear; j++)				{					unit.gear.push(byteArray.readInt());				}								unit.items = new Array();								var numItems:int = byteArray.readUnsignedShort();								for(var j:int = 0; j < numItems; j++)				{					var item:ItemPacket = new ItemPacket();					item.id = byteArray.readInt();					item.ownerType = byteArray.readByte();					item.ownerId = byteArray.readInt();					item.playerId = byteArray.readInt();					item.type = byteArray.readShort();					item.template = byteArray.readInt();					item.volume = byteArray.readInt();										unit.items.push(item);				}														unitList.push(unit);			}						var numClaims:int = byteArray.readUnsignedShort();			trace("numClaims: " + numClaims);						for(i = 0; i < numClaims; i++)			{				var claim:ClaimPacket = new ClaimPacket();				claim.id = byteArray.readInt();				claim.tileIndex = byteArray.readInt();				claim.cityId = byteArray.readInt();				claim.state = byteArray.readShort();				claim.createdTime = byteArray.readInt();								claimList.push(claim);			}						var numImprovements:int = byteArray.readUnsignedShort();			trace("numImprovements: " + numImprovements);						for(i = 0; i < numImprovements; i++)			{				var improvement:Object = {id: byteArray.readInt(),										  type: byteArray.readShort()};										  				improvementList.push(improvement);										  			}						var numAssignments:int = byteArray.readUnsignedShort();			trace("numAssignments: " + numAssignments);			for(i = 0; i < numAssignments; i++)			{				var assignment:AssignmentPacket = new AssignmentPacket();				assignment.id = byteArray.readInt();				assignment.caste = byteArray.readByte();				assignment.race = byteArray.readByte();				assignment.amount = byteArray.readInt();				assignment.targetId = byteArray.readInt();				assignment.targetType = byteArray.readShort();																				  				assignmentList.push(assignment);										  			}														var numItems:int = byteArray.readUnsignedShort();			for(i = 0; i < numItems; i++)			{				var item:ItemPacket = new ItemPacket();				item.id = byteArray.readInt();				item.ownerType = byteArray.readByte();				item.ownerId = byteArray.readInt();				item.playerId = byteArray.readInt();				item.type = byteArray.readShort();				item.template = byteArray.readInt();				item.volume = byteArray.readInt();								itemList.push(item);			}						var numPopulations:int = byteArray.readUnsignedShort();						for(i = 0; i < numPopulations; i++)			{				var population:PopulationPacket = new PopulationPacket();				population.cityId = byteArray.readInt();				population.caste = byteArray.readByte();				population.race = byteArray.readByte();				population.value = byteArray.readInt();												populationList.push(population);			}						var numContracts:int = byteArray.readUnsignedShort();							for(i = 0; i < numContracts; i++)			{				var contract:ContractPacket = new ContractPacket();				contract.id = byteArray.readInt();				contract.cityId = byteArray.readInt();				contract.type = byteArray.readShort();				contract.targetType = byteArray.readShort();				contract.targetId = byteArray.readInt();				contract.objectType = byteArray.readShort();				contract.production = byteArray.readInt();				contract.createdTime = byteArray.readInt();				contract.lastUpdate = byteArray.readInt();								contractList.push(contract);			}											infoCity.buildings = buildingList;						infoCity.units = unitList;						infoCity.claims = claimList;			infoCity.improvements = improvementList;			infoCity.assignments = assignmentList;			infoCity.items = itemList;			infoCity.populations = populationList;			infoCity.contracts = contractList;											return infoCity;		}				public static function readInfoGenericArmy(byteArray:ByteArray) : InfoGenericArmy		{			var army:InfoGenericArmy = new InfoGenericArmy();			army.id = byteArray.readInt();			army.playerId = byteArray.readInt();			army.name = byteArray.readUTF();			army.kingdomName = byteArray.readUTF();					return army;		}				public static function readInfoGenericCity(byteArray:ByteArray) : InfoGenericCity		{			var city:InfoGenericCity = new InfoGenericCity();			city.id = byteArray.readInt();			city.playerId = byteArray.readInt();			city.name = byteArray.readUTF();			city.kingdomName = byteArray.readUTF();					return city;		}						public static function readInfoItemRecipe(byteArray:ByteArray) : RecipePacket		{			var recipe:RecipePacket = new RecipePacket();			var materialAmounts = new Array();			var materialTypes = new Array();			var numAmounts:int;			var numMaterials:int;						recipe.typeId = byteArray.readInt();			recipe.templateId = byteArray.readInt();			recipe.playerId = byteArray.readInt();			recipe.itemName = byteArray.readUTF();			recipe.flavourText = byteArray.readUTF();						recipe.materialAmount = new Array();						numAmounts = byteArray.readUnsignedShort();						for(var i:int = 0; i < numAmounts; i++)			{				var materialAmount:int = byteArray.readInt();								materialAmounts.push(materialAmount);			}						recipe.materialAmount = materialAmounts;						recipe.materialType = new Array();						numMaterials = byteArray.readUnsignedShort();						for(var i:int = 0; i < numMaterials; i++)			{				var materialType:int = byteArray.readInt();								materialTypes.push(materialType);			}						recipe.materialType = materialTypes;									return recipe;		}				public static function readBattleInfo(byteArray:ByteArray) : BattleInfo		{			trace("readBattleInfo");			var battleInfo:BattleInfo = new BattleInfo();			battleInfo.battleId = byteArray.readInt();			battleInfo.armies = new Array();			battleInfo.items = new Array();						var numArmies:int = byteArray.readUnsignedShort();			for (var i:int = 0 ; i < numArmies; i++)			{				var army:ArmyPacket = new ArmyPacket();				army.id = byteArray.readInt();				army.playerId = byteArray.readInt();								army.name = byteArray.readUTF();				army.kingdomName = byteArray.readUTF();								army.battleUnits = new Array();								var numUnits:int = byteArray.readUnsignedShort();								for (var j:int = 0; j < numUnits; j++)				{					var battleUnit:BattleUnitPacket = new BattleUnitPacket();					battleUnit.id = byteArray.readInt();					battleUnit.name = byteArray.readUTF();					battleUnit.templateId = byteArray.readInt();					battleUnit.size = byteArray.readInt();										army.battleUnits.push(battleUnit);				}								battleInfo.armies.push(army);			}						var numItems:int = byteArray.readUnsignedShort();			for(i = 0; i < numItems; i++)			{				var item:ItemPacket = new ItemPacket();				item.id = byteArray.readInt();				item.ownerType = byteArray.readByte();				item.ownerId = byteArray.readInt();				item.playerId = byteArray.readInt();				item.type = byteArray.readShort();				item.template = byteArray.readInt();				item.volume = byteArray.readInt();								battleInfo.items.push(item);			}						return battleInfo;		}				public static function readBattleEvent(byteArray:ByteArray) : BattleEvent		{			trace("readBattleEvent");			var battleEvent:BattleEvent = new BattleEvent();			battleEvent.army = new ArmyPacket();									battleEvent.eventType = byteArray.readShort();			battleEvent.battleId = byteArray.readInt();			battleEvent.army.id = byteArray.readInt();			battleEvent.army.playerId = byteArray.readInt();			battleEvent.army.name = byteArray.readUTF();			battleEvent.army.kingdomName = byteArray.readUTF();										battleEvent.army.battleUnits = new Array();						var numUnits:int = byteArray.readUnsignedShort();							for (var j:int = 0; j < numUnits; j++)			{				var battleUnit:BattleUnitPacket = new BattleUnitPacket();				battleUnit.id = byteArray.readInt();				battleUnit.name = byteArray.readUTF();				battleUnit.templateId = byteArray.readInt();				battleUnit.size = byteArray.readInt();								battleEvent.army.battleUnits.push(battleUnit);			}									return battleEvent;		}				public static function readBattleDamage(byteArray:ByteArray) : BattleDamage		{			trace("readBattleDamage");			var battleDamage:BattleDamage = new BattleDamage();						battleDamage.battleId = byteArray.readInt();			battleDamage.sourceId = byteArray.readInt();			battleDamage.targetId = byteArray.readInt();			battleDamage.damage = byteArray.readInt();						return battleDamage;		}				public static function getCmd(cmd:int) : String		{			var msg:String = "";						switch(cmd)			{				case 1:					msg = "Login";					break;				case 4:					msg = "Bad";					break;				default:					msg = "Unknown";			}						return msg;						}				public static function getError(error:int) : String		{			var msg:String = "";						switch(error)			{												case 1:					msg = "Bad Login";					break;				default:					msg = "Unknown";			}						return msg;		}	}}	
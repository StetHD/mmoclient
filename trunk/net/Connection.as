package net{	import flash.errors.*;	import flash.net.Socket;	import flash.system.*;	import flash.utils.Endian;	import flash.utils.ByteArray;	import flash.events.*	import flash.utils.getTimer;		import net.packet.*;	import game.Game;		public class Connection extends EventDispatcher	{		public static var INSTANCE:Connection = new Connection();				//public static var HOST:String = "localhost";		public static var HOST:String = "www.gemtowerdefense.com";				public static var PORT:int = 2345;						//Events 		public static var onConnectEvent:String = "onConnectEvent";		public static var onCloseEvent:String = "onCloseEvent";		public static var onIOErrorEvent:String = "onIOErrorEvent";		public static var onSecurityErrorEvent:String = "onSecurityEvent";		public static var onLoggedInEvent:String = "onLoggedInEvent";		public static var onClockSyncEvent:String = "onClockSyncEvent";		public static var onBadEvent:String = "onBadEvent";		public static var onMapEvent:String = "onMapEvent";		public static var onPerceptionEvent:String = "onPerceptionEvent";		public static var onInfoKingdomEvent:String = "onInfoKingdomEvent";		public static var onInfoArmyEvent:String = "onInfoArmyEvent";		public static var onInfoCityEvent:String = "onInfoCityEvent";		public static var onInfoTileEvent:String = "onInfoTileEvent";		public static var onInfoUnitQueueEvent:String = "onInfoUnitQueueEvent";		public static var onInfoGenericArmy:String = "onInfoGenericArmyEvent";		public static var onInfoItemRecipe:String = "onInfoItemRecipe";		public static var onBattleInfoEvent:String = "onBattleInfoEvent";		public static var onBattleEvent:String = "onBattleEvent";		public static var onBattleDamageEvent:String = "onBattleDamageEvent";						public static var onReceiveChatMsg:String = "onReceiveChatMsg";				public static var onSendMoveArmy:String = "onSendMoveArmy";		public static var onSendAttackTarget:String = "onSendAttackTarget";		public static var onSendRequestInfo:String = "onSendRequestInfo";		public static var onSendCityFormArmy:String = "onSendCityFormArmy";		public static var onSendCityQueueUnit:String = "onSendCityQueueUnit";		public static var onSendCityQueueBuilding:String = "onSendCityQueueBuilding";		public static var onSendCityQueueImprovement:String = "onSendCityQueueImprovement";				public static var onSendCityCraftItem:String = "onSendCityCraftItem";		public static var onSendTransferUnit:String = "onSendTransferUnit";		public static var onSendBattleTarget:String = "onSendBattleTarget";		public static var onSendBattleRetreat:String = "onSendBattleRetreat";		public static var onSendAddClaim:String = "onSendAddClaim";		public static var onSendAssignTask:String = "onSendAssignTask";		public static var onSendRemoveTask:String = "onSendRemoveTask";		public static var onSendTransferItem:String = "onSendTransferItem";		public static var onSendAddRecipe:String = "onSendAddRecipe";		public static var onSendAddUnitRecipe:String = "onSendAddUnitRecipe";		public static var onSendChatMsg:String = "onSendChatMsg";				public static var onSuccessAddClaim:String = "onSuccessAddClaim";		public static var onSuccessAssignTask:String = "onSuccessAssignTask";        public static var onSuccessRemoveTask:String = "onSuccessRemoveTask";		public static var onSuccessCityQueueImprovement:String = "onSuccessCityQueueImprovement";		public static var onSuccessAddItemRecipe:String = "onSuccessAddItemRecipe";		public static var onSuccessAddUnitRecipe:String = "onSuccessAddUnitRecipe";		public static var onSuccessTransferItem:String = "onSuccessTransferItem";		public static var onSuccessTransferUnit:String = "onSuccessTransferUnit";						public var clockSyncStartTime:Number = 0;		public var clockSyncEndTime:Number = 0;		public var serverTimeOffset:Number;		public var playerId:Number;		public var serverErrorMsg:String;						private var socket:Socket;				public function Connection() : void		{		}				public function initialize() : void		{			addEventListeners();		}						public function connect() : void		{						socket = new Socket();			socket.addEventListener(Event.CONNECT, connectHandler); 			socket.addEventListener(Event.CLOSE, closeHandler);			socket.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);			socket.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);			socket.addEventListener(ProgressEvent.SOCKET_DATA, socketDataHandler);						try			{				socket.connect(Connection.HOST, Connection.PORT);			}			catch(error:IOError)			{				trace("Connection - connect - IOError exception.");			}			catch(error:SecurityError)			{				trace("Connection - connect - Security exception.");			}		}				public function doLogin(account:String, password:String) : void		{			trace("Connection - doLogin");			Packet.sendLogin(socket, account, password);		}				public function doClientReady() : void		{			Packet.sendClientReady(socket);		}						private function addEventListeners() : void		{			addEventListener(onSendMoveArmy, sendMoveArmy);			addEventListener(onSendAttackTarget, sendAttackTarget);			addEventListener(onSendRequestInfo, sendRequestInfo);			addEventListener(onSendCityFormArmy, sendCityFormArmy);			addEventListener(onSendCityQueueUnit, sendCityQueueUnit);			addEventListener(onSendCityQueueBuilding, sendCityQueueBuilding);			addEventListener(onSendCityQueueImprovement, sendCityQueueImprovement);						addEventListener(onSendCityCraftItem, sendCityCraftItem);			addEventListener(onSendTransferUnit, sendTransferUnit);			addEventListener(onSendBattleTarget, sendBattleTarget);			addEventListener(onSendBattleRetreat, sendBattleRetreat);			addEventListener(onSendAddClaim, sendAddClaim);			addEventListener(onSendAssignTask, sendAssignTask);			addEventListener(onSendRemoveTask, sendRemoveTask);			addEventListener(onSendTransferItem, sendTransferItem);					addEventListener(onSendAddRecipe, sendAddRecipe);			addEventListener(onSendAddUnitRecipe, sendAddUnitRecipe);			addEventListener(onSendChatMsg, sendChatMsg);		}				private function closeHandler(event:Event):void {			trace("closeHandler: " + event);			dispatchEvent(new Event(Connection.onCloseEvent));			}			private function connectHandler(event:Event):void {			trace("connectHandler: " + event);			dispatchEvent(new Event(Connection.onConnectEvent));					}			private function ioErrorHandler(event:IOErrorEvent):void {			trace("ioErrorHandler: " + event);			dispatchEvent(new Event(Connection.onIOErrorEvent));			}			private function securityErrorHandler(event:SecurityErrorEvent):void {			trace("securityErrorEvent.txt: " + event.text);			trace("securityErrorHandler: " + event);			dispatchEvent(new Event(Connection.onSecurityErrorEvent));			}			private function socketDataHandler(event:ProgressEvent):void 		{			var pEvent:ParamEvent;			var bArr:ByteArray = new ByteArray();			var socketByteAvailable:int = socket.bytesAvailable;			trace("Socket Bytes Available: " + socket.bytesAvailable);									try			{				socket.readBytes(bArr, 0, socket.bytesAvailable);								trace("bArr.position: " + bArr.position + " socket.bytesAvailable: " + socket.bytesAvailable); 				while (bArr.position != socketByteAvailable)				{					var cmd:int = bArr.readUnsignedByte();					trace("Connection - cmd: " + cmd);										if(cmd == Packet.PLAYER_ID)					{						playerId = bArr.readInt();						trace("Connection - player Id: " + playerId);								clockSyncStartTime = getTimer();						Packet.sendClockSync(socket);						dispatchEvent(new Event(Connection.onLoggedInEvent));					}								else if(cmd == Packet.CLOCKSYNC)					{								trace("Connection - clock sync");												var high:Number = bArr.readUnsignedInt() * Math.pow(2,32);						var low:Number = bArr.readUnsignedInt();						var currentMS:Number = high + low;						var date:Date = new Date();						trace("currentMS: " + currentMS);												serverTimeOffset = currentMS - date.getTime();												clockSyncEndTime = getTimer();																		dispatchEvent(new Event(Connection.onClockSyncEvent));					}					else if(cmd == Packet.EXPLORED_MAP)					{						trace("Connection - initial explored map");						pEvent = new ParamEvent(Connection.onMapEvent);						pEvent.params = Packet.readExploredMap(bArr);						dispatchEvent(pEvent);					}					else if(cmd == Packet.PERCEPTION)					{										trace("Connection - perception");						pEvent = new ParamEvent(Connection.onPerceptionEvent);						pEvent.params = Packet.readPerception(bArr);						dispatchEvent(pEvent);					}					else if(cmd == Packet.INFO_KINGDOM)					{						trace("Connection - info_kingdom");						pEvent = new ParamEvent(Connection.onInfoKingdomEvent);						pEvent.params = Packet.readInfoKingdom(bArr);						dispatchEvent(pEvent);					}								else if(cmd == Packet.CHAT_MSG)					{						trace("Connection - chat_msg");						pEvent = new ParamEvent(Connection.onReceiveChatMsg);						pEvent.params = Packet.readChatMsg(bArr);						dispatchEvent(pEvent);					}					else if(cmd == Packet.INFO_ARMY)					{						trace("Connection - info_army");						pEvent = new ParamEvent(Connection.onInfoArmyEvent);						pEvent.params = Packet.readInfoArmy(bArr);						dispatchEvent(pEvent);					}					else if (cmd == Packet.INFO_CITY)					{						trace("Connection - info_city");						pEvent = new ParamEvent(Connection.onInfoCityEvent);						pEvent.params = Packet.readInfoCity(bArr);						dispatchEvent(pEvent);										}					else if (cmd == Packet.INFO_TILE)					{						trace("Connection - info_tile");						pEvent = new ParamEvent(Connection.onInfoTileEvent);						pEvent.params = Packet.readInfoTile(bArr);						dispatchEvent(pEvent);												}					else if (cmd == Packet.INFO_GENERIC_ARMY)					{						trace("Connection - info_generic_army");						pEvent = new ParamEvent(Connection.onInfoGenericArmy);						pEvent.params = Packet.readInfoGenericArmy(bArr);						dispatchEvent(pEvent);												}					else if (cmd == Packet.INFO_ITEM_RECIPE)					{						trace("Connection - info_item_recipe")						pEvent = new ParamEvent(Connection.onInfoItemRecipe);						pEvent.params = Packet.readInfoItemRecipe(bArr);						dispatchEvent(pEvent);					}					else if (cmd == Packet.BATTLE_INFO)					{						trace("Connection - battle_info");						pEvent = new ParamEvent(Connection.onBattleInfoEvent);						pEvent.params = Packet.readBattleInfo(bArr);						dispatchEvent(pEvent);					}					else if (cmd == Packet.BATTLE_EVENT)					{						trace("Connection - battle_event");						pEvent = new ParamEvent(Connection.onBattleEvent);						pEvent.params = Packet.readBattleEvent(bArr);						dispatchEvent(pEvent);					}					else if (cmd == Packet.BATTLE_DAMAGE)					{						trace("Connection - battle_damage");						pEvent = new ParamEvent(Connection.onBattleDamageEvent);						pEvent.params = Packet.readBattleDamage(bArr);						dispatchEvent(pEvent);					}					else if(cmd == Packet.SUCCESS)					{						trace("Connection - success");						var success:Success = Packet.readSuccess(bArr);												if(success.type == Packet.ADD_CLAIM)						{							pEvent = new ParamEvent(onSuccessAddClaim);							pEvent.params = success.id;						}							else if(success.type == Packet.ASSIGN_TASK)						{							pEvent = new ParamEvent(onSuccessAssignTask);							pEvent.params = success.id;						}						else if(success.type == Packet.REMOVE_TASK)						{							pEvent = new ParamEvent(onSuccessRemoveTask);							pEvent.params = success.id;						}                        else if(success.type == Packet.CITY_QUEUE_IMPROVEMENT)                        {                            pEvent = new ParamEvent(onSuccessCityQueueImprovement)                            pEvent.params = success.id;                        }						else if(success.type == Packet.ADD_RECIPE)						{							pEvent = new ParamEvent(onSuccessAddItemRecipe);							pEvent.params = success.id;						}						else if(success.type == Packet.ADD_UNIT_RECIPE)						{							pEvent = new ParamEvent(onSuccessAddUnitRecipe);							pEvent.params = success.id;						}						else if(success.type == Packet.TRANSFER_ITEM)						{							pEvent = new ParamEvent(onSuccessTransferItem);							pEvent.params = success.id;						}						else if(success.type == Packet.TRANSFER_UNIT)						{							pEvent = new ParamEvent(onSuccessTransferUnit);							pEvent.params = success.id;						}												dispatchEvent(pEvent);																	}					else if(cmd == Packet.BAD)					{						serverErrorMsg = Packet.readBad(bArr);						trace("Connection - server error msg: " + serverErrorMsg);						dispatchEvent(new Event(Connection.onBadEvent));					}					else					{						trace("Connection - Packet not recognized!");					}				}			} 			catch(error:IOError)			{				trace(error.getStackTrace());				trace("Connection - connect - IOError exception.");			}			catch(error:EOFError)			{				trace(error.getStackTrace());				trace("Connection - connect - EOFError exception.");			}		}				private function sendMoveArmy(e:ParamEvent) : void		{			trace("Connection - sendMoveArmy");			Packet.sendMove(socket, e.params.id, e.params.x, e.params.y);		}				private function sendAttackTarget(e:ParamEvent) : void		{			trace("Connection - sendAttackTarget");			Packet.sendAttack(socket, e.params.id, e.params.targetId);		}				private function sendRequestInfo(e:ParamEvent) : void		{			trace("Connection - sendRequestInfo");			Packet.sendRequestInfo(socket, e.params.type, e.params.targetId);		}				private function sendCityFormArmy(e:ParamEvent) : void		{			trace("Connection - sendCityFormArmy");			var cityFormArmy:CityFormArmy = e.params;			Packet.sendCityFormArmy(socket, cityFormArmy);		}						private function sendCityQueueUnit(e:ParamEvent) : void		{			trace("Connection - sendCityQueueUnit");			var cityQueueUnit:CityQueueUnit = e.params;			Packet.sendCityQueueUnit(socket, cityQueueUnit);		}				private function sendCityQueueBuilding(e:ParamEvent) : void		{			trace("Connection - sendCityQueueBuilding");			var cityQueueBuilding:CityQueueBuilding = e.params;			Packet.sendCityQueueBuilding(socket, cityQueueBuilding);		}						private function sendCityQueueImprovement(e:ParamEvent) : void		{			trace("Connection - onSendCityQueueImprovement");			var cityQueueImprovement:CityQueueImprovement = e.params;			Packet.sendCityQueueImprovement(socket, cityQueueImprovement);												}						private function sendCityCraftItem(e:ParamEvent) : void		{			trace("Connection - sendCityCraftItem");			var cityCraftItem:CityCraftItem = e.params;			Packet.sendCityCraftItem(socket, cityCraftItem);		}								private function sendTransferUnit(e:ParamEvent) : void		{			trace("Connection - sendTransferUnit");			var transferUnit:TransferUnit = e.params;			Packet.sendTransferUnit(socket, transferUnit);		}					private function sendBattleTarget(e:ParamEvent) : void		{			trace("Connection - sendBattleTarget");			var battleTarget:BattleTarget = e.params;						Packet.sendBattleTarget(socket, battleTarget);		}				private function sendBattleRetreat(e:ParamEvent) : void		{			trace("Connection - sendBattleTarget");			var battleRetreat:BattleRetreat = e.params;						Packet.sendBattleRetreat(socket, battleRetreat);		}						private function sendAddClaim(e:ParamEvent) : void		{			trace("Connectioxn - sendAddClaim");			var addClaim:AddClaim = e.params;			Packet.sendAddClaim(socket, addClaim);		}					private function sendAssignTask(e:ParamEvent) : void		{			trace("Connection - sendAssignTask");			var assignTask:AssignTask = e.params;			Packet.sendAssignTask(socket, assignTask);		}				private function sendRemoveTask(e:ParamEvent) : void		{			trace("Connection - sendRemoveTask");			var removeTask:RemoveTask = e.params;			Packet.sendRemoveTask(socket, removeTask);		}				private function sendTransferItem(e:ParamEvent) : void		{			trace("Connection - sendTransferItem");			var transferItem:TransferItem = e.params;			Packet.sendTransferItem(socket, transferItem);					}				private function sendAddRecipe(e:ParamEvent) : void		{			trace("Connection - sendAddRecipe");			var addRecipe:AddRecipe = e.params;			Packet.sendAddRecipe(socket, addRecipe);		}				private function sendAddUnitRecipe(e:ParamEvent) : void		{			trace("Connection - sendAddUnitRecipe");			var addUnitRecipe:AddUnitRecipe = e.params;			Packet.sendAddUnitRecipe(socket, addUnitRecipe);		}				private function sendChatMsg(e:ParamEvent) : void		{			trace("Connection - sendChatMsg");			var chatMsg:ChatMsg = e.params;			Packet.sendChatMsg(socket, chatMsg);		}	}}		
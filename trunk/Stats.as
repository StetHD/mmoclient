package  {	import flash.net.URLLoader;	import flash.events.Event;	import flash.net.URLRequest;	import stats.ImprovementStat;	import stats.BuildingStat;	import stats.ItemStat;	import stats.ItemCategory;		public class Stats 	{		public static var INSTANCE:Stats = new Stats();		public static var DomainURL:String = "";		public var improvementLoader:URLLoader = new URLLoader();		public var buildingLoader:URLLoader = new URLLoader();		public var itemLoader:URLLoader = new URLLoader();		public var itemCategoryLoader:URLLoader = new URLLoader();				public var improvements:Array = new Array();		public var buildings:Array = new Array();		public var items:Array = new Array();		public var itemCategories:Array = new Array();				public function Stats() 		{		}				public function init() : void		{			improvementLoader.addEventListener(Event.COMPLETE, loadImprovementXML);			improvementLoader.load(new URLRequest(DomainURL + "improvements.xml"));						buildingLoader.addEventListener(Event.COMPLETE, loadBuildingXML);			buildingLoader.load(new URLRequest(DomainURL + "buildings.xml"));							itemLoader.addEventListener(Event.COMPLETE, loadItemXML);			itemLoader.load(new URLRequest(DomainURL + "item_type.xml"));							itemCategoryLoader.addEventListener(Event.COMPLETE, loadItemCategoryXML);			itemCategoryLoader.load(new URLRequest(DomainURL + "item_category.xml"));							}				public function getImprovement(id:int) : ImprovementStat		{			for(var i:int = 0; i < improvements.length; i++)			{				var improvementStat:ImprovementStat = ImprovementStat(improvements[i]);								if(improvementStat.id == id)				{					return improvementStat;				}			}						return null;		}				public function getBuilding(id:int) : BuildingStat		{			for(var i:int = 0; i < buildings.length; i++)			{				var buildingStat:BuildingStat = BuildingStat(buildings[i]);								if(buildingStat.id == id)				{					return buildingStat;				}			}						return null;		}				public function getItem(id:int) : ItemStat		{						trace("ItemStat: " + id);			for(var i:int = 0; i < items.length; i++)			{				var itemStat:ItemStat = ItemStat(items[i]);								if(itemStat.id == id)				{					return itemStat;				}			}						return null;		}				public function getHarvestItems(improvementType:int) : Array		{			var harvestItems:Array = new Array();						for(var i:int = 0; i < items.length; i++)			{				var itemStat:ItemStat = ItemStat(items[i]);								trace("itemStat name: " + itemStat.name + " req: " + itemStat.improvementReq);				if(itemStat.improvementReq == improvementType)				{					harvestItems.push(i);				}			}						return harvestItems;		}				private function loadImprovementXML(e:Event) : void		{			var xmlData:XML = XML(e.target.data);			var improvementsList:XMLList = xmlData.row;						for each(var impXML:XML in improvementsList)			{				var imp:ImprovementStat = new ImprovementStat();								imp.id = impXML.Id;				imp.type = ImprovementStat.getTypeId(impXML.Imp_Type);				imp.level = impXML.Imp_Level;				imp.name = String(impXML.Name);				imp.totalHp = impXML.Total_Hp;				imp.populationCap = impXML.Population_Cap;				imp.productionCost = impXML.Production_Cost;				imp.goldCost = impXML.Gold_Cost;				imp.lumberCost = impXML.Lumber_Cost;				imp.stoneCost = impXML.Stone_Cost;								improvements.push(imp);			}						}				private function loadBuildingXML(e:Event) : void		{			var xmlData:XML = XML(e.target.data);			var buildingsList:XMLList = xmlData.row;						for each(var buildingXML:XML in buildingsList)			{				var building:BuildingStat = new BuildingStat();								building.id = buildingXML.Id;				building.type = buildingXML.Building_Type;				building.level = buildingXML.Building_Level;								buildings.push(building);			}		}				private function loadItemXML(e:Event) : void		{			trace("Loading Items...");			var xmlData:XML = XML(e.target.data);			var itemsList:XMLList = xmlData.row;						for each(var itemXML:XML in itemsList)			{				var item:ItemStat = new ItemStat();				var itemProduces:Array = new Array();				var itemMaterialType:Array = new Array();				var itemMaterialAmount:Array = new Array();								if(itemXML.produces != "None")				{					itemProduces = itemXML.produces.split(";");					trace(itemProduces.toString());				}								if(itemXML.material_type != "None")				{					itemMaterialType = itemXML.material_type.split(";");					itemMaterialAmount = itemXML.material_amount.split(";");					trace(itemMaterialType.toString());				}												item.id = itemXML.id;				item.type = itemXML.item_type;				item.name = itemXML.name;				item.productionCost = itemXML.production_cost;				item.batchAmount = itemXML.batch_amount;				item.buildingReq = itemXML.building_req;				item.improvementReq = ImprovementStat.getTypeId(itemXML.improvement_req);				item.produces = itemProduces;				item.materialAmount = itemMaterialAmount;				item.materialType = itemMaterialType;							items.push(item);			}		}				private function loadItemCategoryXML(e:Event) : void				{			var xmlData:XML = XML(e.target.data);			var itemCategoryList:XMLList = xmlData.row;						for each(var itemXML:XML in itemCategoryList)			{							var itemCategory:ItemCategory = new ItemCategory();				var itemContains:Array = new Array();							if(itemXML.contains != "None")				{					itemContains = itemXML.contains.split(";");				}							itemCategory.id = itemXML.id;				itemCategory.name = itemXML.name;				itemCategory.contains = itemContains;								itemCategories.push(itemCategory);			}		}	}	}
package ui {		import flash.display.MovieClip;	import fl.text.TLFTextField;		import game.Contract;	import game.Building;	import game.entity.City;		import QueueProgressIcon;	import game.Assignment;	import game.entity.Improvement;	import flash.display.BitmapData;	import flash.display.Bitmap;	import game.Item;	import flash.utils.Timer;	import flash.events.TimerEvent;	import game.unit.Unit;	import stats.UnitRecipe;	import game.KingdomManager;	import game.Kingdom;	import stats.ItemRecipe;		public class QueueEntryUI extends MovieClip	{				public static var PROGRESS_START_X:int = 58;		public static var PROGRESS_START_Y:int = 16;		public static var PROGRESS_SPACER_X:int = 2;			public var city:City;			public var queueEntryName:TLFTextField;		public var remainingTimeText:TLFTextField;				private var contract:Contract;				private var secTimer:Timer;		private var iconTimer:Timer;		private var remainingTime:Number;				private var secPerIcon:Number = 0;		private var currentSeconds:int = 0;		private var progressIcons:Array = new Array();		private var numProgressIcons:int = 0;				public function QueueEntryUI()		{						secTimer = new Timer(1000, 0);			secTimer.addEventListener(TimerEvent.TIMER, secTimerTick);			secTimer.addEventListener(TimerEvent.TIMER_COMPLETE, secTimerComplete);						iconTimer = new Timer(1000, 0);			iconTimer.addEventListener(TimerEvent.TIMER, iconTimerTick);			iconTimer.addEventListener(TimerEvent.TIMER_COMPLETE, iconTimerComplete);		}				public function setQueueEntry(contract:Contract) : void		{			this.contract = contract;												clearQueueEntry();			setQueueEntryIcon();		}				public function getContract() : Contract		{			return contract;		}			private function setQueueEntryIcon() : void		{			switch(contract.type)			{				case Contract.CONTRACT_BUILDING:					var building:Building = city.getBuildingByType(contract.objectType);					var productionRate:Number = city.getProductionRate(contract.targetId, contract.targetType);										setImage(building.getImage());					setQueueEntryName(Building.getNameByType(building.type));					setRemainingTime(contract.production, productionRate, building.getProductionCost());					setProgressIcons(contract.production, productionRate, building.getProductionCost());										break;				case Contract.CONTRACT_UNIT:					var unitRecipe:UnitRecipe = Stats.INSTANCE.getUnitRecipe(contract.objectType);										var productionRate:Number = city.getProductionRate(contract.targetId, contract.targetType);										setImage(Unit.getImage(unitRecipe.templateId));					setQueueEntryName(Unit.getName(unitRecipe.templateId));					setRemainingTime(contract.production, productionRate, Unit.getProductionCost(unitRecipe.templateId));					setProgressIcons(contract.production, productionRate, Unit.getProductionCost(unitRecipe.templateId));					break;				case Contract.CONTRACT_IMPROVEMENT:					var improvement:Improvement = city.getImprovement(contract.targetId);					var productionRate:Number = city.getProductionRate(contract.targetId, contract.targetType);										setImage(improvement.getImage());					setQueueEntryName(improvement.getName());					setRemainingTime(contract.production, productionRate, improvement.getProductionCost());					setProgressIcons(contract.production, productionRate, improvement.getProductionCost());					break;				case Contract.CONTRACT_HARVEST:				case Contract.CONTRACT_ITEM:					var item:Item = new Item();					var productionRate:Number = city.getProductionRate(contract.targetId, contract.targetType);										item.type = contract.objectType;					item.template = getItemTemplate(contract.objectType);										setImage(item.getImage());					setQueueEntryName(item.getName());					setRemainingTime(contract.production, productionRate, item.getProductionCost());					setProgressIcons(contract.production, productionRate, item.getProductionCost());					break;			}							}				private function getItemTemplate(itemId:int) : int		{			//Check if item id is in recipelist			var kingdom:Kingdom = KingdomManager.INSTANCE.getKingdom(city.playerId);			var recipe:ItemRecipe = kingdom.getItemRecipe(itemId);						if(recipe != null)			{				return recipe.templateId;			}						return -1;		}				private function setImage(bitmapData:BitmapData) : void		{			var image:Bitmap = 	new Bitmap(bitmapData);			image.x = 0;			image.y = 0;						addChild(image);					}				private function setProgressIcons(currentProduction:Number, progressRate:Number, productionCost:Number) : void		{			trace("currentProduction: " + currentProduction + " productionCost: " + productionCost);			var progressRatio:Number = 0;			var numIcons:int = 10;						if(currentProduction != 0)				 progressRatio = currentProduction / productionCost;									if(progressRate > 0)			{				var remainingProduction:int = productionCost - currentProduction;				var prodPerIcon:Number = productionCost / numIcons;				var numIconsRemaining:Number = remainingProduction / prodPerIcon;								secPerIcon = remainingTime / numIconsRemaining;								setIconTimer(secPerIcon, numIconsRemaining);								trace("QueueEntryUI - remainingProduction: " + remainingProduction);				trace("QueueEntryUI - prodPerIcon: " + prodPerIcon);				trace("QueueEntryUI - secPerIcon: " + secPerIcon);			}						numProgressIcons = Math.floor(progressRatio * numIcons);						updateProgressIcons(numProgressIcons);		}						private function updateProgressIcons(numProgressIcons:int) : void		{			removeProgressIcons();						for(var i:int = 0; i < numProgressIcons; i++)			{				var progressIcon:MovieClip = new QueueProgressIcon();								progressIcon.x = PROGRESS_START_X + i * (progressIcon.width + PROGRESS_SPACER_X);				progressIcon.y = PROGRESS_START_Y;								addChild(progressIcon);								progressIcons.push(progressIcon);			}							}				private function removeProgressIcons() : void		{			for(var i:int = 0; i < progressIcons.length; i++)			{				if(this.contains(progressIcons[i]))				{					this.removeChild(progressIcons[i]);				}			}		}				private function setQueueEntryName(entryName:String)		{			queueEntryName.text = entryName;		}				private function setRemainingTime(production:int, progressRate:Number, productionCost:int) : void		{						trace("production: " + production + "progressRate: " + progressRate + " productionCost: " + productionCost);					var remainingDays:Number;			var remainingHours:Number;			var remainingSeconds:String;					if(progressRate > 0)			{				var remainingProduction:int = productionCost - production;				remainingTime = remainingProduction / progressRate;					remainingSeconds = Math.round(remainingTime).toString() + "s";								setSecTimer();			}			else			{				remainingSeconds = "Never";			}						remainingTimeText.text = remainingSeconds;		}				private function setSecTimer() : void		{			secTimer.repeatCount = remainingTime;						if(!secTimer.running)			{								secTimer.start();			}		}						private function setIconTimer(secPerIcon:Number, numIconsRemaining:Number) : void		{			iconTimer.repeatCount = Math.ceil(numIconsRemaining);			iconTimer.delay = secPerIcon * 1000;						if(!iconTimer.running)			{				iconTimer.start();			}		}				private function secTimerTick(e:TimerEvent) : void		{			remainingTime = remainingTime - 1;			var remainingSeconds:String = Math.round(remainingTime).toString() + "s";			remainingTimeText.text = remainingSeconds;		}				private function secTimerComplete(e:TimerEvent) : void		{			//UIEventDispatcher.INSTANCE.dispatchEvent();		}				private function iconTimerTick(e:TimerEvent) : void		{			numProgressIcons++;			updateProgressIcons(numProgressIcons)		}				private function iconTimerComplete(e:TimerEvent) : void		{					}						private function clearQueueEntry() : void		{					}	}	}
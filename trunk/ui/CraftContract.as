package ui {		import flash.display.MovieClip;	import fl.text.TLFTextField;	import flash.events.MouseEvent;	import game.entity.City;	import game.entity.Improvement;	import game.Building;	import game.Item;	import game.Contract;	import flash.events.Event;	import game.Game;	import ui.events.CityUIEvents;	import ui.events.CraftCreateNewEvent;	import stats.ImprovementStat;	import stats.ItemBase;	import flash.text.TextField;	import flash.text.TextFormat;	import game.Kingdom;	import game.KingdomManager;	import stats.ItemTemplate;	import stats.ItemRecipe;	import ui.events.GameEvents;		public class CraftContract extends BaseContract	{		public static var SLIDER_MIN_X:int = 10;		public static var SLIDER_MAX_X:int = 110;		public static var CREATE_NEW_HEIGHT:int = 50;				public var itemQuantitySlider:ItemQuantitySlider;		public var itemQuantityText:TLFTextField;		public var cityName:TLFTextField;		public var requiredMaterials:TLFTextField;				public var craftButton:ContractButton;		public var cancelButton:ContractButton;				private var structureId:int;		private var structureType:int;		private var building:Building;		private var improvement:Improvement;		private var itemQuantity:int;				private var kingdom:Kingdom;				private var numEntries:int;				public function CraftContract() 		{								itemQuantitySlider.addEventListener(MouseEvent.MOUSE_DOWN, sliderMouseDown);			itemQuantitySlider.addEventListener(MouseEvent.MOUSE_UP, sliderMouseUp);						craftButton.addEventListener(MouseEvent.CLICK, craftClick);			cancelButton.addEventListener(MouseEvent.CLICK, closeButtonClick);						selectBlock.createNew.addEventListener(MouseEvent.CLICK, createNewClick);						craftButton.buttonName.text = "Craft";			cancelButton.buttonName.text = "Cancel";					UIEventDispatcher.INSTANCE.addEventListener(GameEvents.SuccessAddItemRecipe, successAddItemRecipe);		}		public function setBuilding(building:Building) : void		{			this.building = building;						structureEntry.nameText.text = building.getName();			structureEntry.levelText.text = "Level 1";			structureEntry.hpText.text = "100";			structureEntry.setImage(building.getImage());			structureEntry.visible = true;			structureId = building.id;			structureType = Building.TYPE;						removeEntries();			setBuildingItems();		}		public function setImprovement(improvement:Improvement) : void		{			this.improvement = improvement;						structureEntry.nameText.text = improvement.getName();			structureEntry.levelText.text = "Level 1";			structureEntry.hpText.text = "100";			structureEntry.setImage(improvement.getImage());			structureEntry.visible = true;			structureId = improvement.id;			structureType = Improvement.TYPE;						removeEntries();			setImprovementItems();		}				private function successAddItemRecipe(e:ParamEvent) : void		{			removeEntries();						if(structureType == Building.TYPE)			{				setBuildingItems();			}			else if(structureType == Improvement.TYPE)			{				setImprovementItems();			}			else			{				trace("Invalid structure type");			}		}					private function setImprovementItems() : void		{			trace("improvement.type: " + improvement.subType);			var items:Array = Stats.INSTANCE.getImprovementItems(improvement.subType);			trace("items: " + items.length);			for(var i:int = 0; i < items.length; i++)			{				var entry:ContractEntry = new ContractEntry();				var itemBase:ItemBase = ItemBase(items[i]);				entry.contractName.text = itemBase.name;				entry.description.text = itemBase.category;				entry.sourceId = city.id;				entry.contractType = Contract.CONTRACT_HARVEST;				entry.objectType = itemBase.type_id;				entry.setImage(Images.INSTANCE.getImage(itemBase.image48));				entry.x = ENTRY_X_START;				entry.y = ENTRY_Y_START + i * (entry.height + 2) + CREATE_NEW_HEIGHT;				entry.addEventListener(MouseEvent.CLICK, mouseClick);				entry.mouseChildren = false;												selectBlock.addChild(entry)								entries.push(entry);							}		}					private function setBuildingItems() : void		{			kingdom = KingdomManager.INSTANCE.getKingdom(Game.INSTANCE.player.id);						var itemsBase:Array = Stats.INSTANCE.getBuildingItems(building.getType());			var itemsRecipe:Array = kingdom.itemRecipes;						numEntries = 0;			setItemsBase(itemsBase);			setItemsRecipe(itemsRecipe);		}				private function setItemsBase(itemsBase:Array) : void		{			for(var i:int = 0; i < itemsBase.length; i++)			{				var entry:ContractEntry = new ContractEntry();				var itemBase:ItemBase = ItemBase(itemsBase[i]);								entry.contractName.text = itemBase.name;				entry.description.text = itemBase.category;				entry.sourceId = city.id;				entry.contractType = Contract.CONTRACT_ITEM;				entry.objectType = itemBase.type_id;				entry.setImage(Images.INSTANCE.getImage(itemBase.image48));				entry.x = ENTRY_X_START;				entry.y = ENTRY_Y_START + i * (entry.height + 2) + CREATE_NEW_HEIGHT;				entry.addEventListener(MouseEvent.CLICK, mouseClick);				entry.mouseChildren = false;												selectBlock.addChild(entry)								entries.push(entry);									numEntries++;			}					}				private function setItemsRecipe(itemsRecipe:Array) : void		{			for(var i:int = 0; i < itemsRecipe.length; i++)			{				var entry:ContractEntry = new ContractEntry();				var itemRecipe:ItemRecipe = ItemRecipe(itemsRecipe[i]);				var itemTemplate:ItemTemplate = Stats.INSTANCE.getItemTemplate(itemRecipe.templateId);								entry.contractName.text = itemRecipe.itemName;				entry.description.text = itemTemplate.itemCategory;				entry.sourceId = city.id;				entry.contractType = Contract.CONTRACT_ITEM;				entry.objectType = itemRecipe.typeId;				entry.setImage(Images.INSTANCE.getImage(103));				entry.x = ENTRY_X_START;				entry.y = ENTRY_Y_START + (numEntries + i) * (entry.height + 2) + CREATE_NEW_HEIGHT;				entry.addEventListener(MouseEvent.CLICK, mouseClick);				entry.mouseChildren = false;												selectBlock.addChild(entry)								entries.push(entry);				}		}				override protected function mouseClick(e:MouseEvent) : void		{			var entry:ContractEntry = ContractEntry(e.target);						entry.x = SELECTED_ENTRY_X;			entry.y = SELECTED_ENTRY_Y;			entry.removeMouseEvents();			entry.hideActivate();						addChild(entry);						selectBlock.visible = false;			selectedEntry = entry;						setItemRequirements();		}							private function setItemRequirements() : void		{			var selectedItemBase:ItemBase = Stats.INSTANCE.getItemBase(selectedEntry.objectType);			requiredMaterials.htmlText = "Required Materials<br>";						//Check if item is item_base type			if(selectedItemBase != null)			{				var requiredItem:ItemBase = Stats.INSTANCE.getItemBase(selectedItemBase.materialType);				requiredMaterials.htmlText += selectedItemBase.materialAmount.toString() + " " +											  requiredItem.name + "";			}			else			{				var selectedRecipe:ItemRecipe = kingdom.getItemRecipe(selectedEntry.objectType);				var itemTemplate:ItemTemplate = Stats.INSTANCE.getItemTemplate(selectedRecipe.templateId);								for(var i:int = 0; i < selectedRecipe.materialType.length; i++)				{					var itemBase:ItemBase = Stats.INSTANCE.getItemBase(selectedRecipe.materialType[i]);										if(itemBase != null)					{						requiredMaterials.htmlText += itemTemplate.materialAmount.toString() + " " + 													  itemBase.name + "<br>";					}				}			}		}				private function sliderMouseDown(e:MouseEvent) : void		{			e.stopPropagation();						addEventListener(Event.ENTER_FRAME, scrollSlider);			addEventListener(MouseEvent.CLICK, sliderMouseClick);		}				private function sliderMouseUp(e:MouseEvent) : void		{			e.stopPropagation();			trace("sliderMouseUp");			removeEventListener(Event.ENTER_FRAME, scrollSlider);		}				private function sliderMouseClick(e:MouseEvent) : void		{			e.stopPropagation();			trace("sliderMouseClick");			removeEventListener(Event.ENTER_FRAME, scrollSlider);		}						private function scrollSlider(e:Event) : void		{			trace("scrollSlider");			var quantity:Number;						if(this.mouseX < SLIDER_MIN_X)			{				itemQuantitySlider.x = SLIDER_MIN_X;			}			else if(this.mouseX > SLIDER_MAX_X)			{				itemQuantitySlider.x = SLIDER_MAX_X;			}			else			{				itemQuantitySlider.x = this.mouseX;			}						itemQuantity = (itemQuantitySlider.x - 9) * 5; 			itemQuantityText.text = itemQuantity.toString();		}				private function craftClick(e:MouseEvent) : void		{			var parameters:Object = {cityId: city.id,									 sourceId: structureId,									 sourceType: structureType,									 itemType: selectedEntry.objectType,									 itemSize: itemQuantity};						var pEvent:ParamEvent = new ParamEvent(Game.cityCraftItemEvent);			pEvent.params = parameters;							Game.INSTANCE.dispatchEvent(pEvent);						}				private function createNewClick(e:MouseEvent) : void		{			trace("Create New Click");			var itemList:Array = new Array();						if(structureType == Improvement.TYPE)			{				//itemList = improvement.getCraftItems();			}			else if(structureType == Building.TYPE)			{				//itemList = building.getCraftableItems();			}							var createNewClick:CraftCreateNewEvent = new CraftCreateNewEvent(CityUIEvents.CraftCreateNewEvent);			createNewClick.itemList = itemList;						UIEventDispatcher.INSTANCE.dispatchEvent(createNewClick);		}				override protected function removeEntries() : void		{			for(var i:int = 0; i < entries.length; i++)			{				var entry:ContractEntry = ContractEntry(entries[i]);								trace("removeEntries " + entry);								if(selectBlock.contains(entry))					selectBlock.removeChild(entry);				else if(this.contains(entry))					this.removeChild(entry);			}		}						private function leftArrowClick(e:MouseEvent) : void		{			if(currentPage > 0)			{				currentPage--;				setCurrentPage();				//setBuildings();			}		}				private function rightArrowClick(e:MouseEvent) : void		{			if(currentPage < (totalPages - 1))			{				currentPage++;				setCurrentPage();				//setBuildings();			}		}				}	}
package ui {		import flash.display.MovieClip;	import fl.text.TLFTextField;	import flash.events.MouseEvent;	import game.entity.City;	import game.entity.Improvement;	import game.Building;	import game.Item;	import game.Contract;	import flash.events.Event;	import game.Game;		public class CraftContract extends BaseContract	{		public static var SLIDER_MIN_X:int = 10;		public static var SLIDER_MAX_X:int = 110;				public var itemQuantitySlider:ItemQuantitySlider;		public var itemQuantityText:TLFTextField;		public var cityName:TLFTextField;				public var craftButton:ContractButton;		public var cancelButton:ContractButton;				private var structureType:int;		private var building:Building;		private var improvement:Improvement;		private var itemQuantity:int;				public function CraftContract() 		{			itemQuantitySlider.addEventListener(MouseEvent.MOUSE_DOWN, sliderMouseDown);			itemQuantitySlider.addEventListener(MouseEvent.MOUSE_UP, sliderMouseUp);						craftButton.addEventListener(MouseEvent.CLICK, craftClick);			cancelButton.addEventListener(MouseEvent.CLICK, closeButtonClick);						craftButton.buttonName.text = "Craft";			cancelButton.buttonName.text = "Cancel";		}		public function setBuilding(building:Building) : void		{		}		public function setImprovement(improvement:Improvement) : void		{			this.improvement = improvement;						structureEntry.nameText.text = improvement.getName();			structureEntry.levelText.text = "Level 1";			structureEntry.hpText.text = "100";			structureEntry.setImage(improvement.getImage());			structureEntry.visible = true;			structureType = Improvement.TYPE;						cityName.text = city.getName();						removeEntries();			setImprovementEntries();		}				private function setImprovementEntries() : void		{			var items:Array = improvement.getHarvestItems();						for(var i:int = 0; i < items.length; i++)			{				var entry:ContractEntry = new ContractEntry();				var item:Item = new Item();				item.id = -1;				item.type = items[i];				item.entityId = -1;								entry.contractName.text = item.getName();				entry.description.text = "";				entry.sourceId = city.id;				entry.contractType = Contract.CONTRACT_ITEM;				entry.objectType = item.type;				entry.setImage(item.getImage());				entry.x = ENTRY_X_START;				entry.y = ENTRY_Y_START + i * (entry.height + 2);				entry.addEventListener(MouseEvent.CLICK, mouseClick);				entry.mouseChildren = false;												selectBlock.addChild(entry)								entries.push(entry);							}		}					private function sliderMouseDown(e:MouseEvent) : void		{			e.stopPropagation();						addEventListener(Event.ENTER_FRAME, scrollSlider);			addEventListener(MouseEvent.CLICK, sliderMouseClick);		}				private function sliderMouseUp(e:MouseEvent) : void		{			e.stopPropagation();			trace("sliderMouseUp");			removeEventListener(Event.ENTER_FRAME, scrollSlider);		}				private function sliderMouseClick(e:MouseEvent) : void		{			e.stopPropagation();			trace("sliderMouseClick");			removeEventListener(Event.ENTER_FRAME, scrollSlider);		}						private function scrollSlider(e:Event) : void		{			trace("scrollSlider");			var quantity:Number;						if(this.mouseX < SLIDER_MIN_X)			{				itemQuantitySlider.x = SLIDER_MIN_X;			}			else if(this.mouseX > SLIDER_MAX_X)			{				itemQuantitySlider.x = SLIDER_MAX_X;			}			else			{				itemQuantitySlider.x = this.mouseX;			}						itemQuantity = (itemQuantitySlider.x - 9) * 5; 			itemQuantityText.text = itemQuantity.toString();		}				private function craftClick(e:MouseEvent) : void		{			var parameters:Object = {cityId: city.id,									 itemType: selectedEntry.objectType,									 itemSize: itemQuantity};						var pEvent:ParamEvent = new ParamEvent(Game.cityQueueItemEvent);			pEvent.params = parameters;							Game.INSTANCE.dispatchEvent(pEvent);						}				override protected function removeEntries() : void		{			for(var i:int = 0; i < entries.length; i++)			{				var entry:ContractEntry = ContractEntry(entries[i]);								trace("removeEntries " + entry);								if(selectBlock.contains(entry))					selectBlock.removeChild(entry);				else if(this.contains(entry))					this.removeChild(entry);			}		}	}	}
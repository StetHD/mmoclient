package ui {		import flash.display.MovieClip;	import fl.text.TLFTextField;	import flash.events.MouseEvent;	import flashx.textLayout.formats.TextLayoutFormat;	import flashx.textLayout.elements.TextFlow;	import stats.ItemTemplate;	import flash.display.Sprite;	import flash.text.TextField;		import stats.ItemCategory;	import ui.events.CityUIEvents;	import ui.events.ItemBuilderDragDropEvent;	import game.Item;	import flash.display.DisplayObject;	import flash.display.Bitmap;	import game.Game;	import stats.ItemRecipe;	import stats.ItemStats;	import ui.events.GameEvents;		public class ItemBuilder extends MovieClip 	{		public static var MAX_PER_PAGE:int = 25;				public var itemBuilderStats:ItemBuilderStats;		public var itemBuilderMaterials:ItemBuilderMaterials;				public var itemName:TextField;		public var statsText:TLFTextField;		public var materialsText:TLFTextField;		public var itemDropDown:DropDown;		public var levelDropDown:LevelDropDown;		public var closeButton:CloseButton;		public var itemDropDownList:DropDownList;		public var levelDropDownList:DropDownList;		public var saveButton:ContractButton;		public var cancelButton:ContractButton;		public var pagination:Pagination;				private var dropDownBgHeight:int;		private var currentPage:int;		private var totalPages:int;						private var selectedTemplate:ItemTemplate = null;				private var itemList:Array = new Array();		private var materialList:Array = new Array();				public function ItemBuilder() 		{			statsText.addEventListener(MouseEvent.CLICK, statsClick);			materialsText.addEventListener(MouseEvent.CLICK, materialsClick);			itemDropDown.addEventListener(MouseEvent.CLICK, itemDropDownClick);			//levelDropDown.addEventListener(MouseEvent.CLICK, levelDropDownClick);						pagination.leftArrow.addEventListener(MouseEvent.CLICK, leftArrowClick)			pagination.rightArrow.addEventListener(MouseEvent.CLICK, rightArrowClick);						saveButton.addEventListener(MouseEvent.CLICK, saveButtonClick);			cancelButton.addEventListener(MouseEvent.CLICK, closeButtonClick);			closeButton.addEventListener(MouseEvent.CLICK, closeButtonClick);						saveButton.buttonName.text = "Save";			cancelButton.buttonName.text = "Cancel";						addEventListener(MouseEvent.MOUSE_DOWN, mouseDown);				addEventListener(MouseEvent.MOUSE_UP, mouseUp);										UIEventDispatcher.INSTANCE.addEventListener(CityUIEvents.ItemBuilderDragDropEvent, itemDropEvent);			UIEventDispatcher.INSTANCE.addEventListener(GameEvents.SuccessAddItemRecipe, successAddItemRecipe);		}				public function showPanel() : void		{			this.parent.setChildIndex(this, this.parent.numChildren - 1);							removeMaterials();						this.visible = true;			pagination.visible = false;			itemDropDownList.visible = false;			levelDropDownList.visible = false;						currentPage = 0;		}				private function itemDropDownClick(e:MouseEvent) : void		{			pagination.visible = true;						setTotalPages();			setCurrentPage();						setDropDownList();		}				private function setDropDownList() : void		{			var yPos:int = 1;			var max:int = ((currentPage + 1) * MAX_PER_PAGE);					var itemTemplates:Array = Stats.INSTANCE.getItemTemplates();						trace("itemTemplates: " + itemTemplates.length);						if(max >= itemTemplates.length)			{				max = itemTemplates.length;			}						removeItems();			itemDropDownList.visible = true;						for(var i:int = currentPage * MAX_PER_PAGE; i < max; i++)			{				var itemTemplate:ItemTemplate = ItemTemplate(itemTemplates[i]);				var itemListEntry:ItemBuilderListEntry = new ItemBuilderListEntry();								itemListEntry.itemText = new TLFTextField();				itemListEntry.itemTemplate = itemTemplate;								itemListEntry.itemText.text = itemTemplate.name;				itemListEntry.itemText.width = 180;				itemListEntry.itemText.selectable = false;				itemListEntry.itemText.mouseChildren = false;					 			itemListEntry.itemText.x = 0;				itemListEntry.itemText.y = yPos * 12;												itemListEntry.addChild(itemListEntry.itemText);								//hitBox.graphics.beginFill(0xCCFF00);				//hitBox.graphics.drawRect(item.x, item.y, item.width, item.height);						//hitBox.visible = false;								//item.hitArea = hitBox;				itemListEntry.addEventListener(MouseEvent.CLICK, itemTemplateClick);						//itemDropDownList.addChild(hitBox); 				itemDropDownList.addChild(itemListEntry); 						//itemList.push(hitBox);				itemList.push(itemListEntry);				 			    var myFormat:TextLayoutFormat = new TextLayoutFormat();				myFormat.textIndent = 8;			    myFormat.color = 0xFFFFFF;				myFormat.fontFamily = "Verdana";				myFormat.fontSize = 10;				 				var myTextFlow:TextFlow = itemListEntry.itemText.textFlow;				myTextFlow.hostFormat = myFormat;				myTextFlow.flowComposer.updateAllControllers();								yPos++;			}		}				private function itemTemplateClick(e:MouseEvent) : void		{			var listEntry:ItemBuilderListEntry = ItemBuilderListEntry(e.target.parent);			trace("listEntry: " + listEntry.itemTemplate.id);						itemDropDownList.visible = false;			pagination.visible = false;						selectedTemplate = listEntry.itemTemplate;			setItemTemplateInfo();			setStats();			setMaterialEntries();		}				private function setItemTemplateInfo() : void		{			itemDropDown.selectedName.text = selectedTemplate.name;		}				private function setStats() : void		{			if(selectedTemplate != null)			{				var itemStats:ItemStats = Stats.INSTANCE.getItemStats(selectedTemplate.id);								itemBuilderStats.atk.text = itemStats.atk.toString();				itemBuilderStats.def.text = itemStats.def.toString();				itemBuilderStats.range.text = itemStats.range.toString();				itemBuilderStats.acc.text = itemStats.acc.toString();				itemBuilderStats.eva.text = itemStats.eva.toString();				itemBuilderStats.speed.text = itemStats.speed.toString();				itemBuilderStats.weight.text = itemStats.weight.toString()				itemBuilderStats.flavourText.text = itemStats.description;			}		}				private function setMaterialEntries() : void		{			removeMaterials();						if(selectedTemplate != null)			{				for(var i:int = 0; i < selectedTemplate.materialCategory.length; i++)				{										var itemCategory:ItemCategory = Stats.INSTANCE.getItemCategory(selectedTemplate.materialCategory[i]);					var materialEntry:ItemBuilderMaterialEntry = new ItemBuilderMaterialEntry();										materialEntry.itemName.text = itemCategory.name;					materialEntry.quantity.text = "Quantity: " + selectedTemplate.materialAmount[i].toString();					materialEntry.itemCategory = itemCategory;					materialEntry.filled = false;										materialEntry.x = 2;					materialEntry.y = 3 + (i * (materialEntry.height + 3));										materialEntry.mouseChildren = false;										itemBuilderMaterials.addChild(materialEntry);										materialList.push(materialEntry);				}			}		}				private function itemDropEvent(e:ItemBuilderDragDropEvent) : void		{			var item:Item = e.item;			var materialEntry:ItemBuilderMaterialEntry = checkDropTarget(e.itemDropTarget);						trace(materialEntry);			if(materialEntry != null)			{				if(!materialEntry.filled)				{					if(checkMaterialType(materialEntry, item))					{						setFilledMaterial(materialEntry, item);					}				}			}		}				private function checkDropTarget(itemDropTarget:DisplayObject) : ItemBuilderMaterialEntry		{			for(var i:int = 0; i < materialList.length; i++)			{				var materialEntry:ItemBuilderMaterialEntry = ItemBuilderMaterialEntry(materialList[i]);								if(materialEntry == itemDropTarget.parent && materialEntry.contains(itemDropTarget))				{					return materialEntry;				}			}						return null;		}				private function checkMaterialType(materialEntry:ItemBuilderMaterialEntry, item:Item) : Boolean		{			for(var i:int = 0; i < materialEntry.itemCategory.contains.length; i++)			{				trace("materialEntry.itemCategory.contains[i] == item.type: " + materialEntry.itemCategory.contains[i].toString() + " " + item.type.toString());				if(materialEntry.itemCategory.contains[i] == item.type)				{					return true;				}			}						return false;		}				private function setFilledMaterial(materialEntry:ItemBuilderMaterialEntry, item:Item) : void		{			materialEntry.materialStatus.text = "Material Filled";			materialEntry.itemName.text = item.getName();			materialEntry.filled = true;			materialEntry.filledItemType = item.type;						var itemImage:Bitmap = new Bitmap(item.getImage());			itemImage.x = 0;			itemImage.y = 0;						materialEntry.addChild(itemImage);		}				private function saveButtonClick(e:MouseEvent) : void		{			if(checkFilledStatus())			{				var parameters:Object = {templateId: selectedTemplate.id,										 playerId: Game.INSTANCE.player.id,										 itemName: itemName.text,										 flavourText: itemBuilderStats.flavourText.text,										 materialType: getMaterialTypes()};								var pEvent:ParamEvent = new ParamEvent(Game.addRecipeEvent);				pEvent.params = parameters;									Game.INSTANCE.dispatchEvent(pEvent);						}		}				private function checkFilledStatus() :Boolean		{			var materialsFilled:Boolean = true;						for(var i:int = 0; i < materialList.length; i++)			{				var materialEntry:ItemBuilderMaterialEntry = ItemBuilderMaterialEntry(materialList[i]);								if(!materialEntry.filled)				{					materialsFilled = false;					break;				}			}						return materialsFilled;		}				private function getMaterialTypes() : Array		{			var materialTypes:Array = new Array();						for(var i:int = 0; i < materialList.length; i++)			{				var materialEntry:ItemBuilderMaterialEntry = ItemBuilderMaterialEntry(materialList[i]);							materialTypes.push(materialEntry.filledItemType);			}						return materialTypes;					}				private function removeItems() : void		{			for(var i:int = 0; i < itemList.length; i++)			{				if(itemDropDownList.contains(itemList[i]))				{					itemDropDownList.removeChild(itemList[i]);				} 			}						itemList = new Array();		}				private function removeMaterials() : void		{			for(var i:int = 0; i < materialList.length; i++)			{				if(itemBuilderMaterials.contains(materialList[i]))				{					itemBuilderMaterials.removeChild(materialList[i]);				}			}						materialList = new Array();		}				private function setTotalPages() : void		{			var itemTemplates:Array = Stats.INSTANCE.getItemTemplates();			totalPages = itemTemplates.length / MAX_PER_PAGE;						if((itemTemplates.length % MAX_PER_PAGE) != 0);			{				totalPages++;			}			pagination.totalPages.text = totalPages.toString();		}				private function setCurrentPage() : void		{			var currentPageText:int = currentPage + 1;			pagination.currentPage.text = currentPageText.toString();		}						private function leftArrowClick(e:MouseEvent) : void		{			if(currentPage > 0)			{				currentPage--;				setCurrentPage();				setDropDownList();			}		}				private function rightArrowClick(e:MouseEvent) : void		{			if(currentPage < (totalPages - 1))			{				currentPage++;				setCurrentPage();				setDropDownList();			}		}						private function levelDropDownClick(e:MouseEvent) : void		{			levelDropDownList.visible = true;		}				private function statsClick(e:MouseEvent) : void		{			itemBuilderStats.visible = true;			itemBuilderMaterials.visible = false;		}				private function materialsClick(e:MouseEvent) : void		{			itemBuilderStats.visible = false;			itemBuilderMaterials.visible = true;		}				private function successAddItemRecipe(e:ParamEvent) : void		{			this.visible = false;		}				private function mouseDown(e:MouseEvent) : void		{				e.stopImmediatePropagation();						this.parent.setChildIndex(this, this.parent.numChildren - 1);			startDrag();					}						private function mouseUp(e:MouseEvent) : void		{					e.stopImmediatePropagation();			stopDrag();		}							private function closeButtonClick(e:MouseEvent) : void		{			this.visible = false;		}			}	}
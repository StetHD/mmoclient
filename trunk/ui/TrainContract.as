package ui {		import flash.display.MovieClip;	import fl.text.TLFTextField;	import flash.events.MouseEvent;	import game.Building;	import ui.events.TrainCreateNewEvent;	import ui.events.CityUIEvents;	import game.KingdomManager;	import game.Game;	import game.Kingdom;	import stats.UnitRecipe;	import stats.UnitTemplate;	import game.Contract;	import game.entity.City;	import stats.ItemRecipe;	import ui.events.PopDragDropEvent;	import game.Population;	import flash.display.BitmapData;	import flash.display.Bitmap;		public class TrainContract extends BaseContract 	{		public static var CREATE_NEW_HEIGHT:int = 50;		public static var MAX_PER_PAGE:int = 4;				public var cityName:TLFTextField;		public var requiredMaterials:TLFTextField;				public var trainButton:ContractButton;		public var cancelButton:ContractButton;					public var addPop:AddPop;		public var disableLayer:MovieClip;				private var structureId:int;		private var structureType:int;		private var building:Building;				private var kingdom:Kingdom;				private var selectedCaste:int = -1;		private var selectedRace:int = -1;		private var selectedAmount:int = 0;				private var casteRaceEntry:BuildingCaste;				public function TrainContract()		{				trainButton.buttonName.text = "Train";			cancelButton.buttonName.text = "Cancel";									trainButton.addEventListener(MouseEvent.CLICK, trainClick);			cancelButton.addEventListener(MouseEvent.CLICK, closeButtonClick);										selectBlock.createNew.addEventListener(MouseEvent.CLICK, createNewClick);			selectBlock.pagination.leftArrow.addEventListener(MouseEvent.CLICK, leftArrowClick);			selectBlock.pagination.rightArrow.addEventListener(MouseEvent.CLICK, rightArrowClick);							addPop.visible = false;			disableLayer.visible = false;						addPop.confirmButton.addEventListener(MouseEvent.CLICK, addPopConfirmClick);			addPop.cancelButton.addEventListener(MouseEvent.CLICK, addPopCancelClick);						casteRaceEntry = new BuildingCaste();			casteRaceEntry.x = 11;			casteRaceEntry.y = 164;			casteRaceEntry.visible = false;						addChild(casteRaceEntry);						UIEventDispatcher.INSTANCE.addEventListener(CityUIEvents.PopDragDropEvent, populationDragDrop);		}				public function setBuilding(building:Building) : void		{			this.building = building;			this.kingdom = KingdomManager.INSTANCE.getKingdom(Game.INSTANCE.player.id);						currentPage = 0;			setTotalPages(kingdom.unitRecipes.length);			setCurrentPage();						setUnits();			setStructure();							casteRaceEntry.visible = false;		}						public function init() : void		{								}				private function setStructure() : void		{			structureEntry.nameText.text = building.getName();			structureEntry.levelText.text = "Level 1";			structureEntry.hpText.text = "100";			structureEntry.setImage(building.getImage());			structureEntry.visible = true;			structureId = building.id;			structureType = Building.TYPE;					}				private function setUnits() : void		{			var unitRecipes:Array = kingdom.unitRecipes;			var maxUnits:int = ((currentPage + 1) * MAX_PER_PAGE);			var yPos:int = 0;						removeEntries();						if(maxUnits >= unitRecipes.length)			{				maxUnits = unitRecipes.length;			}									for(var i:int = currentPage * MAX_PER_PAGE; i < maxUnits; i++)			{				var entry:ContractEntry = new ContractEntry();				var unitRecipe:UnitRecipe = UnitRecipe(unitRecipes[i]);				var unitTemplate:UnitTemplate = Stats.INSTANCE.getUnitTemplate(unitRecipe.templateId);								entry.contractName.text = unitRecipe.unitName;				entry.description.text = unitTemplate.name;				entry.sourceId = city.id;				entry.contractType = Contract.CONTRACT_UNIT;				entry.objectType = unitRecipe.typeId;				entry.setImage(Images.INSTANCE.getImage(99));				entry.x = ENTRY_X_START;				entry.y = ENTRY_Y_START +  yPos * (entry.height + 2) + CREATE_NEW_HEIGHT;				entry.addEventListener(MouseEvent.CLICK, mouseClick);				entry.mouseChildren = false;												selectBlock.addChild(entry)								entries.push(entry);					yPos++;			}					}				private function setCityDetails() : void		{			structureEntry.nameText.text = city.getName();			structureEntry.levelText.text = City.getLevelDescription(city.getLevel()) + " (Level " + city.getLevel().toString() + ")";			structureEntry.hpText.text = "";			structureEntry.setImage(city.getImage());			structureEntry.visible = true;				}						private function populationDragDrop(e:PopDragDropEvent) : void		{			if(this.contains(e.popDropTarget))			{				selectedCaste = e.caste;				selectedRace = e.race;								var numPop:int = city.getNumPopulation(selectedCaste, selectedRace);				var numAssigned:int = city.getNumAssigned(selectedCaste, selectedRace);								addPop.casteRaceText.text = "Add " + Population.getCasteName(selectedCaste) + " " +												Population.getRaceName(selectedRace);																addPop.quantityMaxText.text = "Quantity (max " + (numPop - numAssigned).toString() + ")";				addPop.amountText.stage.focus = addPop.amountText;								addPop.visible = true;				disableLayer.visible = true;								this.setChildIndex(disableLayer, this.numChildren - 1);					this.setChildIndex(addPop, this.numChildren - 1);					}		}				override protected function mouseClick(e:MouseEvent) : void		{			var entry:ContractEntry = ContractEntry(e.target);						entry.x = SELECTED_ENTRY_X;			entry.y = SELECTED_ENTRY_Y;			entry.removeMouseEvents();			entry.hideActivate();						addChild(entry);						selectBlock.visible = false;			selectedEntry = entry;						setUnitRequirements();		}						private function setUnitRequirements() : void		{			var unitRecipe:UnitRecipe = kingdom.getUnitRecipe(selectedEntry.objectType);			var unitTemplate:UnitTemplate = Stats.INSTANCE.getUnitTemplate(unitRecipe.templateId);						for(var i:int = 0; i < unitRecipe.gear.length; i++)			{				var itemRecipe:ItemRecipe = kingdom.getItemRecipe(unitRecipe.gear.length[i]);								if(itemRecipe != null)				{					requiredMaterials.htmlText += itemRecipe.itemName + "<br>";				}			}					}				private function trainClick(e:MouseEvent) : void		{			var parameters:Object = {cityId: city.id,									 buildingId: building.id,									 unitType: selectedEntry.objectType,									 unitSize: selectedAmount,									 caste: selectedCaste,									 race: selectedRace};						var pEvent:ParamEvent = new ParamEvent(Game.cityQueueUnitEvent);			pEvent.params = parameters;							Game.INSTANCE.dispatchEvent(pEvent);						}				private function createNewClick(e:MouseEvent) : void		{			trace("Create New Click");			var createNewClick:TrainCreateNewEvent = new TrainCreateNewEvent(CityUIEvents.TrainCreateNewEvent);			UIEventDispatcher.INSTANCE.dispatchEvent(createNewClick);		}						override protected function removeEntries() : void		{			for(var i:int = 0; i < entries.length; i++)			{				var entry:ContractEntry = ContractEntry(entries[i]);								trace("removeEntries " + entry);								if(selectBlock.contains(entry))					selectBlock.removeChild(entry);				else if(this.contains(entry))					this.removeChild(entry);			}		}						private function addPopConfirmClick(e:MouseEvent) : void		{			addPop.visible = false;			disableLayer.visible = false;						selectedAmount = parseInt(addPop.amountText.text);						setCaste();		}				private function addPopCancelClick(e:MouseEvent) : void		{					}						private function setCaste() : void		{			var raceName:String = Population.getRaceName(selectedRace);							var casteName:String = Population.getCasteName(selectedCaste);					var raceIcon:MovieClip = Population.createRaceIcon(selectedRace);						casteRaceEntry.amountRaceText.text = selectedAmount + " " + raceName;			casteRaceEntry.casteText.text = casteName;			casteRaceEntry.addChild(raceIcon);			casteRaceEntry.visible = true;		}							private function leftArrowClick(e:MouseEvent) : void		{			if(currentPage > 0)			{				currentPage--;				setCurrentPage();				setUnits();			}		}				private function rightArrowClick(e:MouseEvent) : void		{			if(currentPage < (totalPages - 1))			{				currentPage++;				setCurrentPage();				setUnits();			}		}		}	}
package ui{	import flash.display.MovieClip;	import flash.display.Bitmap;	import flash.display.BitmapData;			import flash.events.MouseEvent;		import game.Item;	import flash.geom.Point;	import flash.text.TextFieldAutoSize;	import stats.ItemBase;	import stats.ItemTemplate;		public class IconItem extends MovieClip 	{		private static var REST:int = 0;		private static var ACTIVATE:int = 1;						public var stackSize:MovieClip;		public var imageLayer:MovieClip;				public var item:Item;		public var anchorX:int;		public var anchorY:int;						public var dragging:Boolean = false;				protected var image:Bitmap = null;				private var iconState:int = REST;				private var itemDetail:ItemDetail = null;				public function IconItem()		{			doubleClickEnabled = true;			stackSize.doubleClickEnabled = true;			imageLayer.doubleClickEnabled = true;						addEventListener(MouseEvent.MOUSE_OUT, mouseOut);			addEventListener(MouseEvent.MOUSE_OVER, mouseOver);			//addEventListener(MouseEvent.CLICK, mouseClick);					//addEventListener(MouseEvent.DOUBLE_CLICK, mouseDoubleClick);		}				public function showActivate() : void		{			iconState = ACTIVATE;			this.gotoAndStop("Activate");		}				public function hideActivate() : void		{			iconState = REST;			this.gotoAndStop("Rest");		}				private function mouseOut(e:MouseEvent) : void		{			if(iconState == REST)				this.gotoAndStop("Rest");			else				this.gotoAndStop("Activate");							removeItemDetail();		}				private function mouseOver(e:MouseEvent) : void		{			if(!dragging)			{				this.gotoAndStop("MouseOver");				setItemDetail();			}		}				private function mouseClick(e:MouseEvent): void		{			this.gotoAndStop("MouseClick");		}						public function setItem(_item:Item) : void		{			this.item = _item;									var itemBase:ItemBase = Stats.INSTANCE.getItemBase(item.type);			var image48:int;						if(itemBase != null)			{				image48 = itemBase.image48;			}			else			{				var itemTemplate:ItemTemplate = Stats.INSTANCE.getItemTemplate(item.type);				image48 = 1;			}						image = new Bitmap(Images.INSTANCE.getImage(image48));			image.width = 46;			image.height = 46;			image.smoothing = true;			image.x = 1;			image.y = 1;						imageLayer.addChild(image);								updateStackSize();		}				public function hideStackSize() : void		{			stackSize.visible = false;		}				private function updateStackSize() : void		{			stackSize.sizeText.text = UtilUI.FormatNum(item.volume);		}				private function setItemDetail() : void		{			itemDetail = new ItemDetail();			itemDetail.itemName.text = item.getName();			itemDetail.itemCategory.text = item.getCategory();			itemDetail.flavour.text = item.getDescription();			itemDetail.flavour.wordWrap = true;			itemDetail.flavour.autoSize = TextFieldAutoSize.NONE;			//itemDetail.weight.text = item.getWeight().toString();						var localPoint:Point = new Point(0, 0);			var globalPoint:Point = this.localToGlobal(localPoint);						itemDetail.x = int(globalPoint.x + this.width);			itemDetail.y = int(globalPoint.y + this.height);			itemDetail.visible = true;						this.stage.addChild(itemDetail);				}				public function showItemDetail() : void		{			itemDetail.visible = false;		}				public function hideItemDetail() : void		{			itemDetail.visible = true;		}				private function removeItemDetail() : void		{			if(itemDetail != null)			{				if(itemDetail.parent != null)				{					if(itemDetail.parent.contains(itemDetail))						itemDetail.parent.removeChild(itemDetail);							}			}		}	}	}
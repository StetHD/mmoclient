package ui{		import flash.display.MovieClip;		import flash.events.MouseEvent;	import fl.text.TLFTextField;	import flash.text.TextFormat;	import flashx.textLayout.elements.TextFlow;	import flashx.textLayout.formats.TextLayoutFormat;	import flash.text.engine.TextLine;	import flash.display.Sprite;			import game.Game;	import game.entity.City;		import game.Item;	import game.entity.Army;	import ui.events.ItemBuilderDragDropEvent;	import ui.events.CityUIEvents;	import ui.events.UnitBuilderDragDropEvent;	import game.entity.Entity;	public class InventoryUI extends Panel	{		public static var INVENTORY_PANEL:int = 5;				public static var ICON_X_SPACER:int = 5;		public static var ICON_Y_SPACER:int = 5;		public static var ICON_X_START:int = 5;		public static var ICON_Y_START:int = 23;					public var city:City;		public var cityUI:CityUI;				private var iconItems:Array;				public function InventoryUI() : void		{										iconItems = new Array();				}				override public function showPanel() : void		{			this.visible = true;			setItems();		}				override public function hidePanel() : void		{				this.visible = false;			removeItems();		}				public function setItems() : void		{			removeItems();						for(var i = 0; i < city.items.length; i++)			{				var item:Item = Item(city.items[i]);				var iconItem:IconItem = new IconItem();								iconItem.setItem(item);				iconItem.x = ICON_X_START + (i % 7) * (iconItem.width + ICON_X_SPACER);				iconItem.y = ICON_Y_START + int(i / 7) * (iconItem.height + ICON_Y_SPACER);				iconItem.anchorX = iconItem.x;				iconItem.anchorY = iconItem.y;									iconItem.addEventListener(MouseEvent.MOUSE_DOWN, mouseDown);				iconItem.addEventListener(MouseEvent.MOUSE_UP, mouseUp);															addChild(iconItem);								iconItems.push(iconItem);			}		}				private function mouseDown(e:MouseEvent) : void		{			trace("Mouse down");			this.parent.setChildIndex(this, this.parent.numChildren - 1);			var iconItem:IconItem = IconItem(e.currentTarget);						iconItem.anchorX = iconItem.x;			iconItem.anchorY = iconItem.y;									iconItem.dragging = true;						iconItem.parent.setChildIndex(iconItem, iconItem.parent.numChildren - 1);					iconItem.startDrag();			e.stopPropagation();		}				private function mouseUp(e:MouseEvent) : void		{			trace("Mouse up");				this.parent.setChildIndex(this, this.parent.numChildren - 1);				e.stopPropagation();								var iconItem:IconItem = IconItem(e.currentTarget);										iconItem.stopDrag();				iconItem.dragging = false;							iconItem.x = iconItem.anchorX;			iconItem.y = iconItem.anchorY;										if(cityUI.itemBuilder.contains(iconItem.dropTarget))			{				var dropEvent:ItemBuilderDragDropEvent = new ItemBuilderDragDropEvent(CityUIEvents.ItemBuilderDragDropEvent);				dropEvent.item = iconItem.item;				dropEvent.itemDropTarget = iconItem.dropTarget;										UIEventDispatcher.INSTANCE.dispatchEvent(dropEvent);							}			else if(cityUI.unitBuilder.contains(iconItem.dropTarget))			{				var unitBuilderDropEvent:UnitBuilderDragDropEvent = new UnitBuilderDragDropEvent(CityUIEvents.UnitBuilderDragDropEvent);				unitBuilderDropEvent.item = iconItem.item;				unitBuilderDropEvent.itemDropTarget = iconItem.dropTarget;										UIEventDispatcher.INSTANCE.dispatchEvent(unitBuilderDropEvent);								}			else 			{				if(!this.parent.contains(iconItem.dropTarget))				{					var parameters:Object = {itemId: iconItem.item.id,											 sourceId: city.id,											 sourceUI: this,											 sourceType: Entity.CITY,											 targetUI: iconItem.dropTarget};										var pEvent:ParamEvent = new ParamEvent(Game.transferItemEvent);					pEvent.params = parameters;											Game.INSTANCE.dispatchEvent(pEvent);				}			}		}						private function removeItems() : void		{			for(var i = 0; i < iconItems.length; i++)			{				var iconItem:IconItem = iconItems[i];								if(this.contains(iconItem))						{					iconItem.stackSize = null;					iconItem.item = null;											removeChild(iconItem);				}			}						iconItems = new Array();		}	}}
package ui {		import flash.display.MovieClip;	import game.entity.Improvement;	import game.map.Tile;	import game.Claim;	import game.Kingdom;	import game.KingdomManager;	import flash.utils.Timer;	import flash.events.TimerEvent;	import game.Game;			public class LandDetailStatsPanel extends MovieClip 	{		public static var PROGRESS_START_X:int = 18;		public static var PROGRESS_START_Y:int = 17;		public static var PROGRESS_SPACER_X:int = 2;				public var xCoord:int;		public var yCoord:int;				public var landDetailImprovement:StructureEntry;		public var nothingHere:MovieClip;				public var wild:MovieClip;		public var claiming:LandDetailClaiming;				private var improvement:Improvement;		private var claim:Claim;				private var timer:Timer;		private var progressIcons:Array;				public function LandDetailStatsPanel() 		{			timer = new Timer(1000, 0);			progressIcons = new Array();		}				public function showPanel() : void		{			setLandDetailImprovement(); 		}				private function setLandDetailImprovement() : void		{			improvement = Improvement.getImprovementFromPos(xCoord, yCoord);						if(improvement != null)			{				landDetailImprovement.visible = true;				nothingHere.visible = false;								landDetailImprovement.nameText.text = improvement.getName();				landDetailImprovement.levelText.text = "";				landDetailImprovement.hpText.text = "";				landDetailImprovement.setImage(improvement.getImage());			}			else			{				nothingHere.visible = true;				landDetailImprovement.visible = false;			}					}				public function setClaim(claim:Claim) : void		{			this.claim = claim;						if(claim.id == Claim.INVALID)			{				wild.visible = true;				claiming.visible = false;			}			else			{				setEmpireName();								if(claim.state == Claim.STATE_CLAIM)				{					setProgressIcons(claim.createdTime);					setRemainingTime(claim.createdTime);					setTimer(claim.createdTime);										claiming.claimStatus.text = "Claiming";					claiming.visible = true;					wild.visible = false;				}				else				{					claiming.claimStatus.text = "Claimed";					claiming.timeRemaining.text = "";										claiming.visible = true;					wild.visible = false;									}			}		}				private function setTimer(createdTime:Number) : void		{			if(!timer.running)			{				var date:Date = new Date();				var currentTime:Number =  (date.getTime() + Game.INSTANCE.timeOffset) / 1000;				var diffTime:int = currentTime - createdTime;				var claimTime:int = 60;												timer.repeatCount = claimTime - diffTime;				timer.addEventListener(TimerEvent.TIMER, timerTick);				timer.addEventListener(TimerEvent.TIMER_COMPLETE, timerComplete);				timer.start();			}		}				private function timerTick(e:TimerEvent) : void		{			setProgressIcons(claim.createdTime);			setRemainingTime(claim.createdTime);		}				private function timerComplete(e:TimerEvent) : void		{			clearProgressIcons();			claiming.claimStatus.text = "Claimed";			claiming.timeRemaining.text = "";					}				private function setProgressIcons(createdTime:Number) : void		{			//trace("createTime: " + createdTime)			var date:Date = new Date();			var progressRatio:Number = 0;			var currentTime:Number = (date.getTime() + Game.INSTANCE.timeOffset) / 1000;			var diffTime:int = currentTime - createdTime;						progressRatio = diffTime / Claim.DURATION;						//trace("diffTime: " + diffTime + " currentTime: " + currentTime);						var numProgressIcons:int = Math.floor(progressRatio * 11);						//trace(numProgressIcons);						clearProgressIcons();						for(var i:int = 0; i < numProgressIcons; i++)			{				var progressIcon:MovieClip = new QueueProgressIcon();								progressIcon.x = PROGRESS_START_X + i * (progressIcon.width + PROGRESS_SPACER_X);				progressIcon.y = PROGRESS_START_Y;								claiming.addChild(progressIcon);				progressIcons.push(progressIcon);			}					}						private function clearProgressIcons() : void		{			for(var i:int = 0; i < progressIcons.length; i++)			{				if(claiming.contains(progressIcons[i]))				{					claiming.removeChild(progressIcons[i]);				}			}						progressIcons = new Array();		}				private function setRemainingTime(createdTime:int) : void		{			var date:Date = new Date();			var currentTime:Number = (date.getTime() + Game.INSTANCE.timeOffset) / 1000;			var diffTime:int = currentTime - createdTime;			var claimTime:int = 60;						trace("diffTime: " + diffTime + " currentTime: " + currentTime);						claiming.timeRemaining.text = UtilUI.timeRemaining(claimTime - diffTime);		}				private function setEmpireName() : void		{			var kingdom:Kingdom = KingdomManager.INSTANCE.getKingdomByCity(claim.cityId);						if(kingdom != null)			{				claiming.empireName.text = kingdom.name;			}		}					}	}
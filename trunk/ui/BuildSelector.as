package ui {		import flash.display.MovieClip;	import flash.events.MouseEvent;	import fl.text.TLFTextField;	import game.Item;	import game.map.Tile;	import game.entity.Improvement;	import game.Game;	import ui.events.MainUIEvents;	import ui.events.TileBuildClickEvent;	import net.Connection;	import game.Kingdom;	import game.KingdomManager;	import game.entity.City;	import game.Claim;	import stats.ImprovementStat;			public class BuildSelector extends MovieClip 	{				public static var ENTRY_Y:int = 40;		public static var MAX_PER_PAGE:int = 5;			public var confirmPopup:BuildSelectorConfirmPopup;		public var closeButton:CloseButton;				public var coordinatesText:TLFTextField;		public var tileNameText:TLFTextField;				public var pagination:Pagination;				private var buildSelectorEntries:Array;		private var selectedImprovement:int = -1;				private var improvements:Array;		private var currentPage:int;		private var totalPages:int;				public function BuildSelector() 		{			buildSelectorEntries = new Array();		}				public function init() : void		{											this.visible = false;					closeButton.addEventListener(MouseEvent.CLICK, closeButtonClick);											confirmPopup.buildButton.addEventListener(MouseEvent.CLICK, confirmPopupBuildClick);			confirmPopup.cancelButton.addEventListener(MouseEvent.CLICK, confirmPopupCancelClick);						pagination.leftArrow.addEventListener(MouseEvent.CLICK, leftArrowClick);			pagination.rightArrow.addEventListener(MouseEvent.CLICK, rightArrowClick);						UIEventDispatcher.INSTANCE.addEventListener(MainUIEvents.TileBuildClickEvent, buildClickEvent);						Connection.INSTANCE.addEventListener(Connection.onSuccessCityQueueImprovement, successCityQueueImprovement);		}		public function buildClickEvent(e:TileBuildClickEvent) : void		{			var tileBuildEvent:TileBuildClickEvent = TileBuildClickEvent(e);			var kingdom:Kingdom = KingdomManager.INSTANCE.getKingdom(Game.INSTANCE.player.id);			var claim:Claim = kingdom.getClaim(tileBuildEvent.tile.index);																			if(claim != null)			{				trace("BuildSelector - valid claim");								var city:City = kingdom.getCityById(claim.cityId);				improvements = city.getAvailableTileImprovements();								currentPage = 0;								setTotalPages();				setCurrentPage();				showPanel();				setImprovements();					setTileInfo(tileBuildEvent.tile);							}			else				{				trace("BuildSelector - No claim found.");			}		}				private function setTotalPages() : void		{			totalPages = improvements.length / MAX_PER_PAGE;						if((improvements.length % MAX_PER_PAGE) != 0);			{				totalPages++;			}			pagination.totalPages.text = totalPages.toString();		}				private function setCurrentPage() : void		{			var currentPageText:int = currentPage + 1;			pagination.currentPage.text = currentPageText.toString();		}		private function showPanel() : void		{			confirmPopup.visible = false;						this.visible = true;		}        private function hidePanel() : void        {            this.visible = false;        }				public function setTileInfo(tile:Tile) : void		{			coordinatesText.text = "(" + tile.gameX + "," + tile.gameY + ")";			tileNameText.text = Tile.GetTileName(tile.type);		}				public function setImprovements() : void		{									var yPos:int = 0;			var maxImprovement:int = ((currentPage + 1) * MAX_PER_PAGE);					removeEntries();						if(maxImprovement >= improvements.length)			{				maxImprovement = improvements.length;			}						for(var i:int = currentPage * MAX_PER_PAGE; i < maxImprovement; i++)			{				var buildSelectorEntry:BuildSelectorEntry = new BuildSelectorEntry();								buildSelectorEntry.setEntry(improvements[i]);				buildSelectorEntry.x = 2;				buildSelectorEntry.y = ENTRY_Y + ((buildSelectorEntry.height + 2) * yPos);										buildSelectorEntry.addEventListener(MouseEvent.CLICK, buildSelectorEntryClick);								this.addChild(buildSelectorEntry);								buildSelectorEntries.push(buildSelectorEntry);								yPos++;			}		}				private function buildSelectorEntryClick(e:MouseEvent) : void		{			var buildSelectorEntry:BuildSelectorEntry = BuildSelectorEntry(e.target);						selectedImprovement = buildSelectorEntry.improvementType;						showConfirmPopup(buildSelectorEntry.improvementType);					}				private function showConfirmPopup(improvementType:int) : void		{			confirmPopup.parent.setChildIndex(confirmPopup, confirmPopup.parent.numChildren - 1);									confirmPopup.objectText.text = Improvement.getNameStatic(improvementType);			confirmPopup.objectDetailText.text = Improvement.getNameStatic(improvementType);			confirmPopup.requiredMaterials.htmlText = requiredMaterials(improvementType);						confirmPopup.visible = true;					}				private function requiredMaterials(improvementType:int) : String		{			var improvement:ImprovementStat = Stats.INSTANCE.getImprovement(improvementType);			var requiredMaterials:String;						requiredMaterials = improvement.goldCost.toString() + " Gold<br>" +								improvement.stoneCost.toString() + " Stone<br>" +								improvement.lumberCost.toString() + " Lumber";											return requiredMaterials;		}				private function removeEntries() : void		{			for(var i:int = 0; i < buildSelectorEntries.length; i++)			{				if(this.contains(buildSelectorEntries[i]))				{					this.removeChild(buildSelectorEntries[i]);				}			}		}				private function confirmPopupBuildClick(e:MouseEvent) : void		{			var pEvent:ParamEvent = new ParamEvent(Game.cityQueueImprovementEvent);						pEvent.params = selectedImprovement;			Game.INSTANCE.dispatchEvent(pEvent);								}				private function leftArrowClick(e:MouseEvent) : void		{			if(currentPage > 0)			{				currentPage--;				setCurrentPage();				setImprovements();			}		}				private function rightArrowClick(e:MouseEvent) : void		{			if(currentPage < (totalPages - 1))			{				currentPage++;				setCurrentPage();				setImprovements();			}		}		        private function successCityQueueImprovement(e:ParamEvent) : void        {            trace("BuildSelector - successCityQueueImprovement");            hidePanel();        }						private function confirmPopupCancelClick(e:MouseEvent) : void		{			confirmPopup.visible = false;		}						private function closeButtonClick(e:MouseEvent) : void		{			this.visible = false;		}							}	}
package ui {		import flash.display.MovieClip;	import fl.text.TLFTextField;	import ui.events.MainUIEvents;	import game.Game;	import game.entity.City;	import ui.events.ClaimClickEvent;	import game.map.Tile;	import game.entity.Army;	import flash.events.MouseEvent;	import game.Claim;	import game.KingdomManager;	import ui.events.GameEvents;			public class ClaimLand extends MovieClip 	{		public static const ENTRY_X:int = 6;		public static const ENTRY_Y:int = 44;				public var coords:TLFTextField;		public var tileName:TLFTextField;				public var claimButton:ClaimButton;		public var cancelButton:ClaimButton;		public var closeButton:CloseButton;				private var selectedTile:Tile;		private var selectedArmy:Army;		private var selectedEntry:ClaimCityEntry;				private var entries:Array;				public function ClaimLand() 		{			entries = new Array();		}				public function init() : void		{			this.visible = false;						cancelButton.buttonName.text = "Cancel";						claimButton.addEventListener(MouseEvent.CLICK, claimButtonClick);			cancelButton.addEventListener(MouseEvent.CLICK, closeButtonClick);			closeButton.addEventListener(MouseEvent.CLICK, closeButtonClick);						UIEventDispatcher.INSTANCE.addEventListener(MainUIEvents.ClaimClickEvent, claimClick);			UIEventDispatcher.INSTANCE.addEventListener(GameEvents.SuccessAddClaim, successAddClaim);		}				public function claimClick(e:ClaimClickEvent) : void		{			selectedTile = e.selectedTile;			selectedArmy = e.selectedArmy;			selectedEntry = null;						showPanel();		}				public function showPanel() : void		{			this.visible = true;						removeEntries();			setEntries();		}				private function setEntries() : void		{			var cities:Array = KingdomManager.INSTANCE.getKingdom(selectedArmy.playerId).getCities();			entries = new Array();						for(var i:int = 0; i < cities.length; i++)			{				var city:City = City(cities[i]);								var entry:ClaimCityEntry = new ClaimCityEntry();								entry.cityId = city.id;				entry.cityName.text = city.getName();				entry.cityTypeLevel.text = "Level " + city.getLevel();				entry.distance.text = calcDistance(city.gameX, city.gameY);				entry.x = ENTRY_X;				entry.y = ENTRY_Y + i * (entry.height + 2);				entry.addEventListener(MouseEvent.CLICK, entryClick);				entry.mouseChildren = false;								entries.push(entry);								addChild(entry);			}		}				private function entryClick(e:MouseEvent) : void		{			var entry:ClaimCityEntry = ClaimCityEntry(e.target);			entry.showSelected();						selectedEntry = entry;				}				private function calcDistance(cityX:int, cityY:int) : String		{			var diffX:Number = selectedTile.gameX - cityX;			var diffY:Number = selectedTile.gameY - cityY;						var distance = Math.round(Math.sqrt(diffX * diffX + diffY * diffY));						return distance.toString();		}				private function removeEntries() : void		{			for(var i:int = 0; i < entries.length; i++)			{				var entry:ClaimCityEntry = ClaimCityEntry(entries[i]);								if(contains(entry))				{					removeChild(entry);				}			}		}				private function claimButtonClick(e:MouseEvent) : void		{									if(selectedEntry != null)			{				var parameters:Object = {cityId: selectedEntry.cityId,										 armyId: selectedArmy.id,										 tileX: selectedTile.gameX,										 tileY: selectedTile.gameY};											var pEvent:ParamEvent = new ParamEvent(Game.addClaimEvent);				pEvent.params = parameters;									Game.INSTANCE.dispatchEvent(pEvent);					}		}				private function successAddClaim(e:ParamEvent) : void		{			this.visible = false;		}				private function closeButtonClick(e:MouseEvent) : void		{			this.visible = false;		}				}	}
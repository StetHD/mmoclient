package ui {		import flash.display.MovieClip;	import flash.events.MouseEvent;	import fl.text.TLFTextField;	import game.entity.City;	import game.Building;	import game.Contract;	import game.Game;	import stats.BuildingStat;			public class BuildContract extends BaseContract 	{		public var cityCoords:TLFTextField;		public var tileName:TLFTextField;						public var buildButton:ContractButton;		public var cancelButton:ContractButton;						public var requiredMaterials:TLFTextField;		private var buildings:Array = new Array();				public function BuildContract() 		{			buildButton.addEventListener(MouseEvent.CLICK, buildButtonClick);			cancelButton.addEventListener(MouseEvent.CLICK, cancelButtonClick);			cancelButton.buttonName.text = "Cancel";						selectBlock.pagination.leftArrow.addEventListener(MouseEvent.CLICK, leftArrowClick);			selectBlock.pagination.rightArrow.addEventListener(MouseEvent.CLICK, rightArrowClick);					}				public function init(): void		{			buildings = city.getAvailableBuildings();						currentPage = 0;			setTotalPages(buildings.length);			setCurrentPage();						setBuildings();			setCityDetails();		}				private function setBuildings() : void		{			var maxBuildings:int = ((currentPage + 1) * MAX_PER_PAGE);			var yPos:int = 0;					if(maxBuildings >= buildings.length)			{				maxBuildings = buildings.length;			}						removeBuildings();						for(var i:int = currentPage * MAX_PER_PAGE; i < maxBuildings; i++)			{				var building:BuildingStat = BuildingStat(buildings[i]);				var entry:ContractEntry = new ContractEntry();								entry.contractName.text = building.name;				entry.description.text = building.type + " " + building.level.toString();				entry.sourceId = city.id;				entry.contractType = Contract.CONTRACT_BUILDING;				entry.objectType = building.id;				entry.setImage(Images.INSTANCE.getImage(building.image48));				entry.x = ENTRY_X_START;				entry.y = ENTRY_Y_START + yPos * (entry.height + 2);				entry.addEventListener(MouseEvent.CLICK, mouseClick);				entry.mouseChildren = false;								selectBlock.addChild(entry)								entries.push(entry);				yPos++;			}		}				override protected function mouseClick(e:MouseEvent) : void		{			var entry:ContractEntry = ContractEntry(e.target);						entry.x = SELECTED_ENTRY_X;			entry.y = SELECTED_ENTRY_Y;			entry.removeMouseEvents();			entry.hideActivate();						addChild(entry);						selectBlock.visible = false;			selectedEntry = entry;						setRequirements();		}							private function setRequirements() : void		{			var building:BuildingStat = Stats.INSTANCE.getBuilding(selectedEntry.objectType);			var buildingCost:String = building.goldCost.toString() + " Gold<br>" +									  building.stoneCost.toString() + " Stone<br>" +									  building.lumberCost.toString() + " Lumber";						requiredMaterials.htmlText = buildingCost;		}						private function setCityDetails() : void		{			structureEntry.nameText.text = city.getName();			structureEntry.levelText.text = City.getLevelDescription(city.getLevel()) + " (Level " + city.getLevel().toString() + ")";			structureEntry.hpText.text = "";			structureEntry.setImage(city.getImage());			structureEntry.visible = true;						cityCoords.text = "(" + city.gameX.toString() + "," + city.gameY.toString() + ")";			tileName.text = "";							}				private function removeBuildings() : void		{			for(var i:int = 0; i < entries.length; i++)			{				var entry:ContractEntry = ContractEntry(entries[i]);								if(selectBlock.contains(entry))					selectBlock.removeChild(entry);			}						if(selectedEntry != null)			{				removeChild(selectedEntry);				selectedEntry = null;			}						entries = new Array();		}				private function buildButtonClick(e:MouseEvent) : void		{			if(selectedEntry != null)			{				var parameters:Object = {cityId: selectedEntry.sourceId,										 buildingType: selectedEntry.objectType};								var pEvent:ParamEvent = new ParamEvent(Game.cityQueueBuildingEvent);				pEvent.params = parameters;									Game.INSTANCE.dispatchEvent(pEvent);				}		}				private function cancelButtonClick(e:MouseEvent) : void		{			showPanel();			init();					}		private function leftArrowClick(e:MouseEvent) : void		{			if(currentPage > 0)			{				currentPage--;				setCurrentPage();				setBuildings();			}		}				private function rightArrowClick(e:MouseEvent) : void		{			if(currentPage < (totalPages - 1))			{				currentPage++;				setCurrentPage();				setBuildings();			}		}			}	}
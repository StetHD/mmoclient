package ui {		import flash.display.MovieClip;	import flash.events.MouseEvent;	import fl.text.TLFTextField;	import game.entity.City;	import game.Building;	import game.Contract;	import game.Game;			public class BuildContract extends BaseContract 	{		public var cityCoords:TLFTextField;		public var tileName:TLFTextField;						public var buildButton:ContractButton;		public var cancelButton:ContractButton;						public function BuildContract() 		{			buildButton.addEventListener(MouseEvent.CLICK, buildButtonClick);			cancelButton.addEventListener(MouseEvent.CLICK, closeButtonClick);		}				public function setBuildings(): void		{			var buildings:Array = city.getAvailableBuildings();			entries = new Array();						removeBuildings();						for(var i:int = 0; i < buildings.length; i++)			{				var building:Building = Building(buildings[i]);				var entry:ContractEntry = new ContractEntry();								entry.contractName.text = building.getName();				entry.description.text = "";				entry.sourceId = city.id;				entry.contractType = Contract.CONTRACT_BUILDING;				entry.objectType = building.type;				entry.setImage(building.getImage());				entry.x = ENTRY_X_START;				entry.y = ENTRY_Y_START + i * (entry.height + 2);				entry.addEventListener(MouseEvent.CLICK, mouseClick);				entry.mouseChildren = false;								selectBlock.addChild(entry)								entries.push(entry);			}						setCityDetails();		}				private function setCityDetails() : void		{			structureEntry.nameText.text = city.getName();			structureEntry.levelText.text = City.getLevelDescription(city.getLevel()) + " (Level " + city.getLevel().toString() + ")";			structureEntry.hpText.text = "";			structureEntry.setImage(city.getImage());			structureEntry.visible = true;						cityCoords.text = "(" + city.gameX.toString() + "," + city.gameY.toString() + ")";			tileName.text = "";							}				private function removeBuildings() : void		{			for(var i:int = 0; i < entries.length; i++)			{				var entry:ContractEntry = ContractEntry(entries[i]);								if(selectBlock.contains(entry))					selectBlock.removeChild(entry);			}						if(selectedEntry != null)			{				removeChild(selectedEntry);				selectedEntry = null;			}		}				private function setRequirements(entry:ContractEntry) : void		{					}				private function buildButtonClick(e:MouseEvent) : void		{			if(selectedEntry != null)			{				var parameters:Object = {cityId: selectedEntry.sourceId,										 buildingType: selectedEntry.objectType};								var pEvent:ParamEvent = new ParamEvent(Game.cityQueueBuildingEvent);				pEvent.params = parameters;									Game.INSTANCE.dispatchEvent(pEvent);				}		}	}	}
package game{	import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.events.MouseEvent;		import flash.events.KeyboardEvent;	import flash.utils.getTimer;	import flash.utils.Timer;	import flash.events.EventPhase;	import flash.events.Event;	import flash.geom.Rectangle;	import net.packet.BattleTarget;	import net.packet.Perception;		import Main;		import game.battle.Battle;	import game.battle.BattleManager;	import game.entity.City;	import game.entity.Army;	import game.entity.Entity;	import game.perception.PerceptionManager	import game.map.Map;	import game.map.MapObjectType;	import game.map.MapBattle;	import game.map.Tile;	import ui.ArmyUI;	import ui.CityUI;	import ui.LandDetailCard;	import net.Connection;	import net.packet.InfoKingdom;	import net.packet.InfoTile;	import net.packet.BattleInfo;	import net.packet.BattleEvent;	import net.packet.BattleDamage;		import net.packet.AddClaim;	import net.packet.Success;		import net.packet.AssignTask;		import net.packet.TransferUnit;	import net.packet.TransferItem;	import net.packet.CityQueueBuilding;	import net.packet.CityCraftItem;	import net.packet.CityQueueImprovement;	import net.packet.RemoveTask;	import ui.UIEventDispatcher;	import ui.events.MainUIEvents;	import ui.events.ShowCityUIEvent;	import ui.events.GameEvents;	import net.packet.BattleEvent;	import net.packet.AddRecipe;	import net.packet.AddUnitRecipe;	import net.packet.CityQueueUnit;	import stats.ItemRecipe;	import stats.UnitRecipe;	import net.packet.CityFormArmy;	import game.unit.Unit;	import net.packet.BattleRetreat;	import net.packet.CityUpdateTax;			public class Game extends Sprite	{						public static var INSTANCE:Game = new Game();			public static var SCROLL_SPEED:int = 8;		public static var GAME_LOOP_TIME:int = 50;									//Incoming events		public static var onInfoArmy:String = "onInfoArmy";				//Outgoing events				public static var cityQueueImprovementEvent:String = "cityQueueImprovementEvent";		public static var addClaimEvent:String = "addClaimEvent";		public static var assignTaskEvent:String = "assignTaskEvent";		public static var removeTaskEvent:String = "removeTaskEvent";		public static var transferUnitEvent:String = "transferUnitEvent";		public static var transferItemEvent:String = "transferItemEvent";		public static var cityFormArmyEvent:String = "cityFormArmyEvent";		public static var cityQueueBuildingEvent:String = "cityQueueBuildingEvent";		public static var cityQueueUnitEvent:String = "cityQueueUnitEvent";		public static var cityCraftItemEvent:String = "cityCraftItemEvent";		public static var cityUpdateTaxEvent:String = "cityUpdateTaxEvent";		public static var addRecipeEvent:String = "addRecipeEvent";		public static var addUnitRecipeEvent:String = "addUnitRecipeEvent";		public static var battleRetreatEvent:String = "battleRetreatEvent";				//States		public static var TileNone:int = 0;		public static var TileClaimed:int = 1;		public static var TileImproved:int = 2;						public var main:Main;		public var player:Player;				public var tileStatus:int;				public var selectedTile:Tile;		public var selectedEntity:Entity;		public var targetedEntity:Entity;		public var action:int = 0;				public var lastTransferUnit:LastTransferUnit;		public var lastTransferItem:LastTransferItem;				public var timeOffset:Number;				private var lastLoopTime:Number;		private var perceptionManager:PerceptionManager;		private var map:Map;				private var initialPerception:Boolean = true;				private var prevSentPacket:Object;						private var armyUIList:Array;				public function Game() : void		{						selectedEntity = null;										targetedEntity = null;						player = new Player();			armyUIList = new Array();						lastTransferUnit = new LastTransferUnit();			lastTransferItem = new LastTransferItem();						map = Map.INSTANCE;			perceptionManager = PerceptionManager.INSTANCE;									addChild(map);																			Connection.INSTANCE.addEventListener(Connection.onClockSyncEvent, connectionClockSync);															Connection.INSTANCE.addEventListener(Connection.onMapEvent, connectionMap);			Connection.INSTANCE.addEventListener(Connection.onPerceptionEvent, connectionPerception);				Connection.INSTANCE.addEventListener(Connection.onInfoKingdomEvent, connectionInfoKingdom);			Connection.INSTANCE.addEventListener(Connection.onInfoArmyEvent, connectionInfoArmy);			Connection.INSTANCE.addEventListener(Connection.onInfoCityEvent, connectionInfoCity);			Connection.INSTANCE.addEventListener(Connection.onInfoTileEvent, connectionInfoTile);			Connection.INSTANCE.addEventListener(Connection.onBattleInfoEvent, connectionBattleInfo);			Connection.INSTANCE.addEventListener(Connection.onBattleDamageEvent, connectionBattleDamage);						Connection.INSTANCE.addEventListener(Connection.onSuccessAddClaim, successAddClaim);						Connection.INSTANCE.addEventListener(Connection.onSuccessAssignTask, successAssignTask);			Connection.INSTANCE.addEventListener(Connection.onSuccessRemoveTask, successRemoveTask);			Connection.INSTANCE.addEventListener(Connection.onSuccessAddItemRecipe, successAddItemRecipe);			Connection.INSTANCE.addEventListener(Connection.onSuccessAddUnitRecipe, successAddUnitRecipe);			Connection.INSTANCE.addEventListener(Connection.onSuccessTransferItem, successTransferItem);			Connection.INSTANCE.addEventListener(Connection.onSuccessTransferUnit, successTransferUnit);						addEventListener(Tile.onClick, tileClicked);			addEventListener(Tile.onDoubleClick, tileDoubleClicked);			addEventListener(Army.onClick, armyClicked);			addEventListener(Army.onDoubleClick, armyDoubleClicked);			addEventListener(City.onClick, cityClicked);			addEventListener(City.onDoubleClick, cityDoubleClicked);			addEventListener(MapBattle.onDoubleClick, battleDoubleClicked);					addEventListener(addClaimEvent, processAddClaim);			addEventListener(assignTaskEvent, processAssignTask);			addEventListener(removeTaskEvent, processRemoveTask);			addEventListener(transferUnitEvent, processTransferUnit);			addEventListener(transferItemEvent, processTransferItem);			addEventListener(cityFormArmyEvent, processCityFormArmy);			addEventListener(cityQueueBuildingEvent, processCityQueueBuilding);			addEventListener(cityQueueUnitEvent, processCityQueueUnit);			addEventListener(cityCraftItemEvent, processCityCraftItem);			addEventListener(cityQueueImprovementEvent, processCityQueueImprovement);				addEventListener(cityUpdateTaxEvent, processCityUpdateTax);			addEventListener(addRecipeEvent, processAddRecipe);			addEventListener(addUnitRecipeEvent, processAddUnitRecipe);			addEventListener(battleRetreatEvent, processBattleRetreat);		}												public function addPerceptionData(perception:Perception) : void		{										//Set entities from perception			perceptionManager.setMapObjects(perception.mapObjects);						//Set map tiles from perception			map.setTiles(perception.mapTiles);						//Set map fog of war			map.setFogOfWar(Kingdom.getEntities(player.id));		}				public function requestInfo(typeId:int, targetId:int) : void		{			var parameters:Object = { type: typeId, targetId: targetId };			var requestInfoEvent:ParamEvent = new ParamEvent(Connection.onSendRequestInfo);			requestInfoEvent.params = parameters;			Connection.INSTANCE.dispatchEvent(requestInfoEvent);		}						public function setLastLoopTime(time:Number) : void		{			lastLoopTime = time;		}						public function startLoop() : void		{			addEventListener(Event.ENTER_FRAME, this.gameLoop);		}				public function gameLoop(e:Event) : void		{			var time:Number = getTimer();									if((time - lastLoopTime) >= Game.GAME_LOOP_TIME)			{							}		}				public function keyDownEvent(e:KeyboardEvent) : void		{			var rect:Rectangle = Game.INSTANCE.scrollRect;					if (e.keyCode == 87) //w			{				rect.y -= Game.SCROLL_SPEED;				}			else if (e.keyCode == 68) //d			{				rect.x += Game.SCROLL_SPEED;			}			else if (e.keyCode == 83) //s			{ 				rect.y += Game.SCROLL_SPEED;						 			}			else if (e.keyCode == 65) //a			{				rect.x -= Game.SCROLL_SPEED;					 			}									Game.INSTANCE.scrollRect = rect;		}					public function stageClick(e:MouseEvent) : void		{						if (e.eventPhase == EventPhase.AT_TARGET)			{				var mapX:int = e.stageX - 100;				var mapY:int = e.stageY;								var rect:Rectangle = Game.INSTANCE.scrollRect;				var offsetX:int = rect.x;				var offsetY:int = rect.y;								var gameX:int = (mapX + offsetX) / Tile.WIDTH;				var gameY:int = (mapY + offsetY) / Tile.HEIGHT								trace("Stage Click - mapX: " + mapX + " mapY: " + mapY);				trace("Stage Click - gameX: " + gameX + " gameY: " + gameY + " action: " + action);								processMove(gameX, gameY);			}		}								public function setArmyUIDisplayOrder(obj:DisplayObject) : void		{			for(var i:int = 0; i < armyUIList.length; i++)			{				var armyUI:ArmyUI = ArmyUI(armyUIList[i]);								if(armyUI.contains(obj))				{					armyUI.setTopDisplayOrder();					break;				}			}		}				public function processAttack(targetId:int)		{			if (selectedEntity != null)			{				trace("Game - processAttack");				var parameters:Object = {id: selectedEntity.id, targetId: targetId};				var attackEvent:ParamEvent = new ParamEvent(Connection.onSendAttackTarget);				attackEvent.params = parameters;								Connection.INSTANCE.dispatchEvent(attackEvent);					}		}				public function processBattleTarget(battleId:int, sourceArmyId:int, sourceUnitId:int, targetArmyId:int, targetUnitId:int) : void		{			var battleTarget:BattleTarget = new BattleTarget();						battleTarget.battleId = battleId;			battleTarget.sourceArmyId = sourceArmyId;			battleTarget.sourceUnitId = sourceUnitId;			battleTarget.targetArmyId = targetArmyId;			battleTarget.targetUnitId = targetUnitId;						var battleTargetEvent:ParamEvent = new ParamEvent(Connection.onSendBattleTarget);			battleTargetEvent.params = battleTarget;						Connection.INSTANCE.dispatchEvent(battleTargetEvent);		}						private function processAddClaim(e:ParamEvent) : void		{			var addClaim:AddClaim = new AddClaim();						addClaim.cityId = e.params.cityId;			addClaim.armyId = e.params.armyId;			addClaim.x = e.params.tileX;			addClaim.y = e.params.tileY;			prevSentPacket = addClaim;						var addClaimEvent:ParamEvent = new ParamEvent(Connection.onSendAddClaim);			addClaimEvent.params = addClaim;						Connection.INSTANCE.dispatchEvent(addClaimEvent);		}						private function processMainUIBuildClick(e:ParamEvent) : void		{			trace("Game - processMainUIBuildClick");		}						private function processAssignTask(e:ParamEvent) : void		{			trace("Game - processAssignTask");						var assignTask:AssignTask = new AssignTask();			var assignment:Assignment = Assignment(e.params);						assignTask.cityId = assignment.cityId;			assignTask.caste = assignment.caste;			assignTask.race = assignment.race;			assignTask.amount = assignment.amount;			assignTask.targetId = assignment.targetId;			assignTask.targetType = assignment.targetType;					    prevSentPacket = assignTask;						var sendAssignTask:ParamEvent = new ParamEvent(Connection.onSendAssignTask);			sendAssignTask.params = assignTask;						Connection.INSTANCE.dispatchEvent(sendAssignTask);		}				private function processRemoveTask(e:ParamEvent) : void		{			trace("Game - processRemoveTask");			var removeTask:RemoveTask = new RemoveTask();			var assignment:Assignment = Assignment(e.params);						removeTask.cityId = assignment.cityId;			removeTask.assignmentId = assignment.id;						prevSentPacket = removeTask;						var sendRemoveTask:ParamEvent = new ParamEvent(Connection.onSendRemoveTask);			sendRemoveTask.params = removeTask;						Connection.INSTANCE.dispatchEvent(sendRemoveTask);		}				private function processTransferUnit(e:ParamEvent) : void		{			trace("Game - processTransferUnit");					var unitId:int = e.params.unitId;			var sourceId:int = e.params.sourceId;			var sourceType:int = e.params.sourceType;			var sourceUI:DisplayObject = e.params.sourceUI;			var targetUI:DisplayObject = e.params.targetUI;			var transferUnit:TransferUnit = new TransferUnit();			var sendTransferUnit:ParamEvent = new ParamEvent(Connection.onSendTransferUnit);						transferUnit.unitId = unitId;			transferUnit.sourceId = sourceId;			transferUnit.sourceType = sourceType;						if(armyUIContainsDropTarget(sourceUI, targetUI))			{				var targetArmyId:int = getArmyUIArmyId(targetUI);				transferUnit.targetId = targetArmyId;				transferUnit.targetType = Entity.ARMY;													lastTransferUnit.setTransferUnit(transferUnit, sourceUI, targetUI);													sendTransferUnit.params = transferUnit;							Connection.INSTANCE.dispatchEvent(sendTransferUnit);			}			else if(main.cityUI.contains(targetUI))							{				transferUnit.targetId = main.cityUI.getCityId();				transferUnit.targetType = Entity.CITY;								lastTransferUnit.setTransferUnit(transferUnit, sourceUI, targetUI);				sendTransferUnit.params = transferUnit;							Connection.INSTANCE.dispatchEvent(sendTransferUnit);					}							}				private function processTransferItem(e:ParamEvent) : void		{			trace("Game - processTransferItem");					var itemId:int = e.params.itemId;			var sourceId:int = e.params.sourceId;			var sourceType:int = e.params.sourceType;			var sourceUI:DisplayObject = e.params.sourceUI;			var targetUI:DisplayObject = e.params.targetUI;						var transferItem:TransferItem = new TransferItem;						transferItem.sourceId = sourceId;			transferItem.sourceType = sourceType;						var sendTransferItem:ParamEvent = new ParamEvent(Connection.onSendTransferItem);									if(armyUIContainsDropTarget(sourceUI, targetUI))			{				var armyUI:ArmyUI = getArmyUI(targetUI);				var unitId:int = armyUI.getSelectedUnitId();				transferItem.itemId = itemId;				transferItem.targetId = unitId;				transferItem.targetType = Entity.UNIT													lastTransferItem.setTransferItem(transferItem, sourceUI, targetUI);								sendTransferItem.params = transferItem;							Connection.INSTANCE.dispatchEvent(sendTransferItem);			}			else if(main.cityUI.contains(targetUI))							{				transferItem.itemId = itemId;				transferItem.targetId = main.cityUI.getCityId();				transferItem.targetType = Entity.CITY;								lastTransferItem.setTransferItem(transferItem, sourceUI, targetUI);													prevSentPacket = transferItem;				sendTransferItem.params = transferItem;									Connection.INSTANCE.dispatchEvent(sendTransferItem);								}				}				private function processCityFormArmy(e:ParamEvent) : void		{			trace("processCityFormArmy");			var cityFormArmy:CityFormArmy = new CityFormArmy();			cityFormArmy.cityId = e.params.cityId;			cityFormArmy.armyName = e.params.armyName;						var sendCityFormArmy:ParamEvent = new ParamEvent(Connection.onSendCityFormArmy);			sendCityFormArmy.params = cityFormArmy;						Connection.INSTANCE.dispatchEvent(sendCityFormArmy);		}				private function processCityQueueBuilding(e:ParamEvent) : void		{			var cityQueueBuilding:CityQueueBuilding = new CityQueueBuilding();			cityQueueBuilding.buildingId = e.params.buildingId;			cityQueueBuilding.cityId = e.params.cityId; 			cityQueueBuilding.buildingType = e.params.buildingType; 						var sendCityQueueBuilding:ParamEvent = new ParamEvent(Connection.onSendCityQueueBuilding);						sendCityQueueBuilding.params = cityQueueBuilding;						Connection.INSTANCE.dispatchEvent(sendCityQueueBuilding);		}				private function processCityQueueUnit(e:ParamEvent) : void		{			var cityQueueUnit:CityQueueUnit = new CityQueueUnit();			cityQueueUnit.cityId = e.params.cityId;			cityQueueUnit.buildingId = e.params.buildingId;			cityQueueUnit.unitType = e.params.unitType;			cityQueueUnit.unitSize = e.params.unitSize;			cityQueueUnit.caste = e.params.caste;			cityQueueUnit.race = e.params.race;						var sendCityQueueUnit:ParamEvent = new ParamEvent(Connection.onSendCityQueueUnit);			sendCityQueueUnit.params = cityQueueUnit;						Connection.INSTANCE.dispatchEvent(sendCityQueueUnit);		}				private function processCityCraftItem(e:ParamEvent) : void		{			var cityCraftItem:CityCraftItem = new CityCraftItem();						cityCraftItem.cityId = e.params.cityId; 			cityCraftItem.sourceId = e.params.sourceId;			cityCraftItem.sourceType = e.params.sourceType;			cityCraftItem.itemType = e.params.itemType; 			cityCraftItem.itemSize = e.params.itemSize;						var sendCityCraftItem:ParamEvent = new ParamEvent(Connection.onSendCityCraftItem);						sendCityCraftItem.params = cityCraftItem;						Connection.INSTANCE.dispatchEvent(sendCityCraftItem);		}						private function processCityUpdateTax(e:ParamEvent) : void		{			var cityUpdateTax:CityUpdateTax = new CityUpdateTax();						cityUpdateTax.cityId = e.params.cityId;			cityUpdateTax.taxes = e.params.taxes;						var sendCityUpdateTax:ParamEvent = new ParamEvent(Connection.onSendCityUpdateTax);			sendCityUpdateTax.params = cityUpdateTax;						Connection.INSTANCE.dispatchEvent(sendCityUpdateTax);		}				private function processAddRecipe(e:ParamEvent) : void		{			var addRecipe:AddRecipe = new AddRecipe();			addRecipe.templateId = e.params.templateId;			addRecipe.playerId = e.params.playerId;			addRecipe.itemName = e.params.itemName;			addRecipe.flavourText = e.params.flavourText;			addRecipe.materialType = e.params.materialType;						prevSentPacket = addRecipe;						var sendAddRecipe:ParamEvent = new ParamEvent(Connection.onSendAddRecipe);			sendAddRecipe.params = addRecipe;					Connection.INSTANCE.dispatchEvent(sendAddRecipe);		}				private function processAddUnitRecipe(e:ParamEvent) : void		{			var addUnitRecipe:AddUnitRecipe = new AddUnitRecipe();			addUnitRecipe.templateId = e.params.templateId;			addUnitRecipe.playerId = e.params.playerId;			addUnitRecipe.unitName = e.params.unitName;			addUnitRecipe.defaultSize = e.params.defaultSize;			addUnitRecipe.gear = e.params.gear;						prevSentPacket = addUnitRecipe;						var sendAddUnitRecipe:ParamEvent = new ParamEvent(Connection.onSendAddUnitRecipe);			sendAddUnitRecipe.params = addUnitRecipe;						Connection.INSTANCE.dispatchEvent(sendAddUnitRecipe);		}						private function processBattleRetreat(e:ParamEvent) : void		{			var battleRetreat:BattleRetreat = new BattleRetreat();			battleRetreat.battleId = e.params.battleId;			battleRetreat.armyId = e.params.armyId;						prevSentPacket = null;						var sendBattleRetreat:ParamEvent = new ParamEvent(Connection.onSendBattleRetreat);			sendBattleRetreat.params = battleRetreat;						Connection.INSTANCE.dispatchEvent(sendBattleRetreat);		}				private function processCityQueueImprovement(e:ParamEvent) : void		{			var kingdom:Kingdom = KingdomManager.INSTANCE.getKingdom(player.id);			var claim:Claim = kingdom.getClaim(selectedTile.index);											if(claim != null)			{							var cityQueueImprovement:CityQueueImprovement = new CityQueueImprovement();						cityQueueImprovement.cityId = claim.cityId;				cityQueueImprovement.type = e.params;				cityQueueImprovement.x = selectedTile.gameX;				cityQueueImprovement.y = selectedTile.gameY;								var sendCityQueueImprovement:ParamEvent = new ParamEvent(Connection.onSendCityQueueImprovement);				sendCityQueueImprovement.params = cityQueueImprovement;								Connection.INSTANCE.dispatchEvent(sendCityQueueImprovement);			}			else			{				trace("Game - processCityQueueImprovement failed: No claim found.");			}		}								private function tileClicked(e:ParamEvent) : void		{			trace("Game - tileClicked");						var tile:Tile = e.params;						if (tile != null)			{								selectedTile = tile;				main.mainUI.setSelectedTile(tile);										setTileStatus(tile);										if(main.mainUI.isAttackCommand())				{					main.mainUI.resetCommand();					if(tile.hasOneEntityOnly())					{						var entity:Entity = tile.getSoloEntity();						processAttack(entity.id);					}				}				else if(main.mainUI.isClaimCommand())				{					trace("isClaimCommand");					main.mainUI.resetCommand();				}								else if(main.mainUI.isMoveCommand())				{					processMove(tile.gameX, tile.gameY);				}			}		}				private function tileDoubleClicked(e:ParamEvent) : void		{			trace("Game - tileDoubleClicked");				trace("e.params:" + e.params);			var parameters:Object = { type: MapObjectType.TILE, targetId: e.params.index };			var requestInfoEvent:ParamEvent = new ParamEvent(Connection.onSendRequestInfo);			requestInfoEvent.params = parameters;			Connection.INSTANCE.dispatchEvent(requestInfoEvent);		}						private function processMove(gameX:int, gameY:int) : void		{			if(selectedEntity != null)			{				if (main.mainUI.isMoveCommand())				{										main.mainUI.resetCommand();										var parameters:Object = {id: selectedEntity.id, x: gameX, y: gameY};					var pEvent = new ParamEvent(Connection.onSendMoveArmy);					pEvent.params = parameters;					Connection.INSTANCE.dispatchEvent(pEvent);					}			}		}				private function armyClicked(e:ParamEvent) : void		{		}				private function armyDoubleClicked(e:ParamEvent) : void		{			trace("Army RequestInfo: " + MapObjectType.ARMY + " " + e.params.id);			requestInfo(MapObjectType.ARMY, e.params.id);		}				private function cityDoubleClicked(e:ParamEvent) : void		{			trace("City RequestInfo: " + MapObjectType.CITY + " " + e.params.id);			requestInfo(MapObjectType.CITY, e.params.id);		}				private function battleDoubleClicked(e:ParamEvent) : void		{			var mapBattle:MapBattle = MapBattle(e.params);						requestInfo(MapObjectType.BATTLE, mapBattle.battleId);		}				private function improvementDoubleClicked(e:ParamEvent) : void		{			requestInfo(MapObjectType.IMPROVEMENT, e.params.id);		}										private function cityClicked(e:ParamEvent) : void		{			trace("Game - cityClicked");		}						private function connectionClockSync(e:Event) : void		{			trace("Game - connectionClockSync");			timeOffset = Connection.INSTANCE.serverTimeOffset;		}				private function connectionMap(e:ParamEvent) : void		{			trace("Game - connectionMap");			map.setTiles(e.params);		}				private function connectionPerception(e:ParamEvent) : void		{			trace("Game - perception");			addPerceptionData(e.params);						var perceptionUpdate:ParamEvent = new ParamEvent(GameEvents.PerceptionUpdate);			UIEventDispatcher.INSTANCE.dispatchEvent(perceptionUpdate);			}				private function connectionInfoKingdom(e:ParamEvent) : void		{			trace("Game - infoKingdom");			var infoKingdom:InfoKingdom = InfoKingdom(e.params);							KingdomManager.INSTANCE.addKingdom(player.id, infoKingdom);		}						private function connectionInfoArmy(e:ParamEvent) : void		{			trace("Game - infoArmy");			var army:Army = Army(perceptionManager.getEntity(e.params.id));			army.setArmyInfo(e.params);							//Check if armyUI is already open due to transfer of unit or item			var armyUI:ArmyUI = getArmyUIById(army.id);						if(armyUI != null)			{							armyUI.setArmy(army);											}			else			{				armyUI = new ArmyUI();				main.addChild(armyUI);									armyUI.setArmy(army);							armyUI.showPanel();							armyUI.closeButton.addEventListener(MouseEvent.CLICK, armyUICloseClick);								armyUIList.push(armyUI);			}		}				private function connectionInfoCity(e:ParamEvent) : void		{			trace("Game - infoCity");				var city:City = City(perceptionManager.getEntity(e.params.id));			city.setCityInfo(e.params);						if(!initialPerception)			{				var showCityUIEvent:ShowCityUIEvent = new ShowCityUIEvent(MainUIEvents.ShowCityUIEvent);				showCityUIEvent.city = city;								UIEventDispatcher.INSTANCE.dispatchEvent(showCityUIEvent);			}			else			{				initialPerception = false;			}		}						private function connectionInfoTile(e:ParamEvent) : void		{			trace("Game - infoTile");			var infoTile:InfoTile = InfoTile(e.params);			var landDetailCard:LandDetailCard = new LandDetailCard();						main.addChild(landDetailCard);							landDetailCard.init();			landDetailCard.setInfo(infoTile);			landDetailCard.showPanel();			landDetailCard.closeButton.addEventListener(MouseEvent.CLICK, landDetailCloseClick);								}						private function connectionBattleInfo(e:ParamEvent) : void		{			trace("Game - battleInfo");			var battleInfo:BattleInfo = BattleInfo(e.params);						var battle:Battle = new Battle();								battle.id = battleInfo.battleId;			battle.setArmies(battleInfo.armies);			battle.setItems(battleInfo.items);						BattleManager.INSTANCE.addBattle(battle);								main.combatUI.setBattle(battle);			main.combatUI.showPanel();		}		private function connnectionBattleEvent(e:ParamEvent) : void		{			trace("Game - battleEvent");			var battleEvent:BattleEvent = BattleEvent(e.params);									var battle:Battle = BattleManager.INSTANCE.getBattle(battleEvent.battleId);		}				private function connectionBattleDamage(e:ParamEvent) : void		{			trace("Game - battleDamage");			var battleDamage:BattleDamage = e.params as BattleDamage;			var battle:Battle = BattleManager.INSTANCE.getBattle(battleDamage.battleId);						battle.addDamage(battleDamage);					}					private function successAddClaim(e:ParamEvent) : void		{			trace("Game - successAddClaim");									if(prevSentPacket != null)			{				var claimId:int = e.params;								var addClaim:AddClaim = AddClaim(prevSentPacket);				var claim:Claim = new Claim();				var city:City = City(perceptionManager.getEntity(addClaim.cityId));								if(city != null)				{					claim.id = claimId;					claim.cityId = addClaim.cityId;					claim.tileIndex = Map.convertCoords(addClaim.x, addClaim.y);					claim.state = Claim.STATE_CLAIM;										city.addClaim(claim);										var successAddClaim:ParamEvent = new ParamEvent(GameEvents.SuccessAddClaim);					UIEventDispatcher.INSTANCE.dispatchEvent(successAddClaim);					}				else				{					trace("Could not find cityId: " + addClaim.cityId);				}												}		}				private function successAssignTask(e:ParamEvent) : void		{			trace("Game - successAssignTask");			if(prevSentPacket != null)			{				var assignTask:AssignTask = AssignTask(prevSentPacket);								requestInfo(MapObjectType.CITY, assignTask.cityId);			}		}				private function successRemoveTask(e:ParamEvent) : void		{			trace("Game - successRemoveTask");			if(prevSentPacket != null)			{				var removeTask:RemoveTask = RemoveTask(prevSentPacket);				requestInfo(MapObjectType.CITY, removeTask.cityId);			}		}				private function successAddItemRecipe(e:ParamEvent) : void		{			trace("Game - successAddItemRecipe");			if(prevSentPacket != null)			{				var kingdom:Kingdom = KingdomManager.INSTANCE.getKingdom(player.id);				var addItemRecipe:AddRecipe = AddRecipe(prevSentPacket);				var recipe:ItemRecipe = new ItemRecipe();								recipe.typeId = e.params;				recipe.templateId = addItemRecipe.templateId;				recipe.playerId = addItemRecipe.playerId;				recipe.itemName = addItemRecipe.itemName;				recipe.flavourText = addItemRecipe.flavourText;				recipe.materialType = addItemRecipe.materialType;								kingdom.addItemRecipe(recipe);								var successAddItemRecipe:ParamEvent = new ParamEvent(GameEvents.SuccessAddItemRecipe);				UIEventDispatcher.INSTANCE.dispatchEvent(successAddItemRecipe);							}		}				private function successAddUnitRecipe(e:ParamEvent) : void		{			trace("Game - successAddUnitRecipe");			if(prevSentPacket != null)			{				var kingdom:Kingdom = KingdomManager.INSTANCE.getKingdom(player.id);				var addUnitRecipe:AddUnitRecipe = AddUnitRecipe(prevSentPacket);				var recipe:UnitRecipe = new UnitRecipe();								recipe.typeId = e.params;				recipe.templateId = addUnitRecipe.templateId;				recipe.playerId = addUnitRecipe.playerId;				recipe.unitName = addUnitRecipe.unitName;				recipe.defaultSize = addUnitRecipe.defaultSize;				recipe.gear = addUnitRecipe.gear;								kingdom.addUnitRecipe(recipe);								var successAddUnitRecipe:ParamEvent = new ParamEvent(GameEvents.SuccessAddUnitRecipe);				UIEventDispatcher.INSTANCE.dispatchEvent(successAddUnitRecipe);			}		}						private function successTransferItem(e:ParamEvent) : void		{			trace("Game - successTransferItem");					var successTransferItem:ParamEvent = new ParamEvent(GameEvents.SuccessTransferItem);			UIEventDispatcher.INSTANCE.dispatchEvent(successTransferItem);					}				private function successTransferUnit(e:ParamEvent) : void		{			trace("Game - successTransferUnit");					var successTransferUnit:ParamEvent = new ParamEvent(GameEvents.SuccessTransferUnit);			UIEventDispatcher.INSTANCE.dispatchEvent(successTransferUnit);					}						private function setTileStatus(tile:Tile) : void		{			var kingdom:Kingdom = KingdomManager.INSTANCE.getKingdom(player.id);			var claim:Claim = kingdom.getClaim(selectedTile.index);							if(claim != null)			{				tileStatus = TileClaimed;											}			else			{				tileStatus = TileNone;			}		}				//TODO ArmyUI functions shouldn't be in Game...		public function armyUIContainsDropTarget(obj:DisplayObject, dropTargetObj:DisplayObject) : Boolean		{			if(obj != null && dropTargetObj != null)			{							for(var i:int = 0; i < armyUIList.length; i++)				{					var armyUI:ArmyUI = ArmyUI(armyUIList[i]);										if(armyUI.contains(dropTargetObj))					{						return true;					}										}			}						return false;		}						private function getArmyUIById(id:int) : ArmyUI		{			for(var i:int = 0; i < armyUIList.length; i++)			{				var armyUI:ArmyUI = ArmyUI(armyUIList[i]);								if(armyUI.army.id == id)					return armyUI;			}						return null;		}				private function getArmyUIArmyId(obj:DisplayObject) : int		{			for(var i:int = 0; i < armyUIList.length; i++)			{				var armyUI:ArmyUI = ArmyUI(armyUIList[i]);								if(armyUI.contains(obj))					return armyUI.army.id;			}						return -1;		}						private function getArmyUI(obj:DisplayObject) : ArmyUI		{			for(var i:int = 0; i < armyUIList.length; i++)			{				var armyUI:ArmyUI = ArmyUI(armyUIList[i]);								if(armyUI.contains(obj))					return armyUI;			}						return null;		}						private function armyUICloseClick(e:MouseEvent) : void		{			var armyUI:ArmyUI = ArmyUI(e.target.parent);						if(main.contains(armyUI))			{				armyUI.closeButton.removeEventListener(MouseEvent.CLICK, armyUICloseClick);												main.removeChild(armyUI);								for(var i:int = 0; i < armyUIList.length; i++)				{					if(armyUI == armyUIList[i])					{						armyUIList.splice(i, 1);											break;					}				}							}		}				private function landDetailCloseClick(e:MouseEvent) : void		{			var landDetailCard:LandDetailCard = LandDetailCard(e.target.parent);						if(main.contains(landDetailCard))			{				landDetailCard.closeButton.removeEventListener(MouseEvent.CLICK, landDetailCloseClick);				main.removeChild(landDetailCard);			}					}	}}
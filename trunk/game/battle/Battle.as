package game.battle{	import game.entity.Army;	import game.perception.PerceptionManager;		import game.unit.Unit;		import net.packet.ArmyPacket;	import net.packet.BattleDamage;		import game.unit.events.UnitEvent;	import game.unit.events.UnitDestroyEvent;	import game.unit.events.UnitDamageEvent;	import game.battle.BattleEventDispatcher;	import game.Game;	import game.Item;			public class Battle 	{				public var id:int;		public var armies:Array;						public var items:Array;				public function Battle() : void		{		}						public function setArmies(armiesPacket:Array) : void		{			armies = new Array();						for (var i:int = 0; i < armiesPacket.length; i++)			{				var armyId:int = armiesPacket[i].id;				var army:Army = Army(PerceptionManager.INSTANCE.getEntity(armyId));								army.setArmyPacket(armiesPacket[i]);								armies.push(army);			}		}				public function setItems(itemsPacket:Array) : void		{			items = new Array();						for(var i:int = 0; i < itemsPacket.length; i++)			{				var item:Item = new Item();								item.id = itemsPacket[i].id;				item.ownerType = itemsPacket[i].ownerType;				item.ownerId = itemsPacket[i].ownerId;				item.type = itemsPacket[i].type;				item.template = itemsPacket[i].template;				item.volume = itemsPacket[i].volume;								items.push(item);			}		}				public function addDamage(battleDamage:BattleDamage) : void		{			var unitDamageEvent:UnitDamageEvent;			var unitDestroyEvent:UnitDestroyEvent;						var targetUnit:Unit = getUnit(battleDamage.targetId);									if (targetUnit != null)			{				targetUnit.addDamage(battleDamage.damage);								unitDamageEvent = new UnitDamageEvent(UnitEvent.DAMAGED);							unitDamageEvent.damage = battleDamage.damage;				unitDamageEvent.unitId = battleDamage.targetId;				unitDamageEvent.sourceId = battleDamage.sourceId;								BattleEventDispatcher.INSTANCE.dispatchEvent(unitDamageEvent);								if (targetUnit.size <= 0)				{					var unitDestroyEvent:UnitDestroyEvent = new UnitDestroyEvent(UnitEvent.DESTROYED);					unitDestroyEvent.unitId = battleDamage.targetId;										BattleEventDispatcher.INSTANCE.dispatchEvent(unitDestroyEvent);				}							}			else			{				throw new Error("Battle - addDamage - Invalid unit id.");			}		}				private function getUnit(unitId:int) : Unit		{			for (var i:int = 0; i < armies.length; i++)			{				var army:Army = armies[i];				var unit:Unit = army.getUnit(unitId);								if (unit != null)					return unit;			}						return null;		}			}	}
package game.unit{	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.display.DisplayObjectContainer;			import game.entity.Army;	import game.entity.City;	import game.entity.Entity;	import game.unit.events.UnitDamageEvent;	import game.unit.events.UnitEvent;	import stats.UnitTemplate;		public class Unit	{				public static var TYPE:int = Entity.UNIT;				public static var FOOTSOLDIER:int = 1;		public static var ARCHER:int = 2;				public var id:int;		public var name:String;		public var type:int;		public var recipeId:int;		public var templateId:int;		public var size:int;		public var unitName:String;		public var items:Array;		public var gear:Array;				public var parentEntity:Entity;		public var unitEventDispatcher:UnitEventDispatcher;				public function Unit() : void		{			items = new Array();			gear = new Array();						unitEventDispatcher = new UnitEventDispatcher();		}				public function addDamage(damage:int) : void		{			var unitTemplate:UnitTemplate = Stats.INSTANCE.getUnitTemplate(templateId);			var unitHp:int = unitTemplate.hp;			var numKilled:int = damage / unitHp;			size -= numKilled;						//May 2012, note sure what this dispatch is for			var unitDamageEvent:UnitDamageEvent = new UnitDamageEvent(UnitEvent.DAMAGED);						unitDamageEvent.damage = damage;			unitDamageEvent.unitId = id;			unitDamageEvent.sourceId = -1;							unitEventDispatcher.dispatchEvent(unitDamageEvent);		}				public static function getImage(unitType:int) : BitmapData		{											trace("Unit - getImage - unitType: " + unitType);			return new Footsoldier();		}				public static function getName(templateId:int) : String		{			var unitTemplate:UnitTemplate = Stats.INSTANCE.getUnitTemplate(templateId);			return unitTemplate.name;		}				public static function removeUnitChildren(displayContainer:DisplayObjectContainer) : void		{			var numChildern:int = displayContainer.numChildren - 1;						for (var i:int = numChildern; i >= 0; i--)			{				if(displayContainer.getChildAt(i) is Unit)					displayContainer.removeChildAt(i); 			}		}				public static function getProductionCost(type:int) : int			{			trace("Unit - getProductionCost type: " + type);			var template:UnitTemplate = Stats.INSTANCE.getUnitTemplate(type)			return template.productionCost;		}	}}
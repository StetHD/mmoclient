package game.entity{	import flash.display.Sprite;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.utils.Timer;	import flash.utils.Dictionary;	import game.Game;	import game.unit.Unit;	import game.unit.UnitQueue;	import game.map.Tile;	import game.Claim;	import game.entity.Improvement;		import CityImage;	import game.perception.PerceptionManager;	import game.Assignment;	import net.packet.InfoCity;	import game.Item;	import game.Population;	import game.Building;	import game.Contract;	import game.map.Map;	import stats.BuildingStat;	import net.packet.UnitPacket;	public class City extends Entity	{		public static var TYPE:int = Entity.CITY;		public static var onClick:String = "onCityClick";		public static var onDoubleClick:String = "onCityDoubleClick";		public var cityName:String;		public var taxCommoner:int;		public var taxNoble:int;		public var taxTariff:int;		public var buildings:Array;		public var units:Array;		public var claims:Array;		public var improvements:Array;		public var assignments:Array;		public var items:Array;		public var populations:Array;				public var contracts:Array;		public var landQueue:Array;		public var seaQueue:Array;		public var airQueue:Array;		private var remainingTimer:Timer;		public function City():void		{			buildings = new Array();			units = new Array();			claims = new Array();			improvements = new Array();			assignments = new Array();			items = new Array();			populations = new Array();			contracts = new Array();					}		override public function initialize():void		{			var imageData:BitmapData = null;			imageData = new CityImage(0,0);			remainingTimer = new Timer(1000);			remainingTimer.addEventListener(TimerEvent.TIMER, timerHandler);			remainingTimer.start();			this.image = new Bitmap(imageData);			this.addChild(this.image);		}						override public function getName() : String		{						return cityName;		}				override protected function mouseClick(e:Event):void		{			var pEvent:ParamEvent = new ParamEvent(Tile.onClick);			pEvent.params = tile;			Game.INSTANCE.dispatchEvent(pEvent);		}		override protected function mouseDoubleClick(e:Event):void		{			trace("City - mouseDoubleClick");			var pEvent:ParamEvent = new ParamEvent(City.onDoubleClick);			pEvent.params = this;			Game.INSTANCE.dispatchEvent(pEvent);		}						public static function getLevelDescription(level:int) : String		{			switch(level)			{				case 1:					return "Hamlet";				case 2:					return "Village";				case 3:					return "Town";				case 4:					return "City";			}						return "null";		}				public function getLevel() : int		{			return 1;		}				public function getCasteValue(casteType:int) : int		{			for(var i = 0; i < populations.length; i++)			{				var population:Population = Population(populations[i]);				trace("Population.caste: " + population.caste + " value: " + population.value);				if(population.caste == casteType)				{					return population.value;				}			}						return 0;		}				public function getPopulation(caste:int) : Array		{			var populationList:Array = new Array();						for(var i = 0; i < populations.length; i++)			{				var population:Population = Population(populations[i]);				if(population.caste == caste)				{					populationList.push(population);				}			}						return populationList;		}				public function getNumPopulation(caste:int, race:int) : int 		{			for(var i = 0; i < populations.length; i++)			{				var population:Population = Population(populations[i]);				if(population.caste == caste && population.race == race)				{					return population.value;				}			}						return 0;		}				public function getNumAssigned(caste:int, race:int) : int		{			var numAssigned:int = 0;								for(var i = 0; i < assignments.length; i++)			{				var assignment:Assignment = Assignment(assignments[i]);								if(assignment.caste == caste && assignment.race == race)				{					numAssigned += assignment.amount;				}			}						return numAssigned;		}				public function getAssignmentsByTarget(targetId:int, targetType) : Array		{			var targetAssignments:Array = new Array();						for(var i = 0; i < assignments.length; i++)			{				var assignment:Assignment = Assignment(assignments[i]);					if(assignment.targetId == targetId &&				   assignment.targetType == targetType)				{					targetAssignments.push(assignment);				}			}						return targetAssignments;		}				public function getContract(targetId:int, targetType:int) : Contract		{			for(var i:int = 0; i < contracts.length; i++)						{				var contract:Contract = Contract(contracts[i]);								if(contract.targetId == targetId && 				   contract.targetType == targetType)				{					return contract;				}							}						return null;		}				public function getTotalPop() : int		{			var total:int = 0;						for(var i = 0; i < populations.length; i++)			{				var population:Population = Population(populations[i]);				total += population.value;							}						return total;		}					public function getTotalFood() : int		{			return 0;		}				public function getNetFood() : Number		{			var netfood:Number = 0;						netfood -= (getCasteValue(Population.CASTE_SLAVES) * Population.CASTE_SLAVES_FOOD);			netfood -= (getCasteValue(Population.CASTE_SOLDIERS) * Population.CASTE_SOLDIERS_FOOD);			netfood -= (getCasteValue(Population.CASTE_COMMONERS) * Population.CASTE_COMMONER_FOOD);			netfood -= (getCasteValue(Population.CASTE_NOBLES) * Population.CASTE_NOBLE_FOOD);						return netfood;		}				public function getIncome() : int		{			var totalIncome:Number = 0.0;						for(var i = 0; i < populations.length; i++)			{				var population:Population = Population(populations[i]);								if(population.caste == Population.CASTE_COMMONERS)				{					totalIncome = totalIncome + (population.value * taxCommoner / 100);				}				else if(population.caste == Population.CASTE_NOBLES)				{					totalIncome = totalIncome + (population.value * taxNoble / 100);				}			}						return totalIncome;		}				public function getNumAssignedByEntity(entityType:int) : int		{			var targetIds:Array = new Array();			var uniqueTargetIds:Array;						for(var i = 0; i < assignments.length; i++)			{				var assignment:Assignment = Assignment(assignments[i]);						if(assignment.targetType == entityType)				{					targetIds.push(assignment.targetId);				}			}						uniqueTargetIds = Util.unique(targetIds);						return uniqueTargetIds.length;		}				public function addClaim(claim:Claim) : void		{			claims.push(claim);		}				public function getClaimFromPos(xCoord:int, yCoord:int) : Claim		{			for(var i:int = 0; i < claims.length; i++)			{				var claim:Claim = Claim(claims[i]); 				var claimX:int = Map.convertCoordX(claim.tileIndex);				var claimY:int = Map.convertCoordY(claim.tileIndex);												trace("City: " + xCoord + " == " + claimX + " " + yCoord + " == " + claimY);				if(claimX == xCoord && claimY == yCoord)				{					return claim;   				}			}						return null;		}				public function getImprovement(improvementId:int) : Improvement		{			for(var i:int = 0; i < improvements.length; i++)			{				var improvement:Improvement = Improvement(improvements[i]);								if(improvement.id == improvementId)					return improvement;			}						return null;		}				public function getBuilding(buildingId:int) : Building		{			for(var i:int = 0; i < buildings.length; i++)			{				var building:Building = Building(buildings[i]);								if(building.id == buildingId)					return building;			}						return null;		}				public function getBuildingByType(buildingType:int) : Building		{			for(var i:int = 0; i < buildings.length; i++)			{				var building:Building = Building(buildings[i]);								if(building.type == buildingType)					return building;			}						return null;		}				public function getProductionRate(targetId:int, targetType:int) : Number		{			var totalRate:Number = 0.0;						for(var i = 0; i < assignments.length; i++)			{				var assignment:Assignment = Assignment(assignments[i]);								if(assignment.targetId == targetId &&				   assignment.targetType == targetType)				{					var productionRatePerGameDay:Number = Population.getProductionRate(assignment.caste);									var productionRatePerSecond:Number = productionRatePerGameDay / (3600 * 6);										totalRate += (productionRatePerSecond * assignment.amount);				}			}						return totalRate;		}				public function getAvailableBuildings() : Array		{							var buildingsByGroup:Dictionary = new Dictionary();			var availableBuildings:Array = new Array();			for(var id in Stats.INSTANCE.buildings)			{				var stat:BuildingStat = BuildingStat(Stats.INSTANCE.buildings[id]);				var type:String = stat.type;								if(buildingsByGroup[type] == null)				{										buildingsByGroup[type] = new Array();					buildingsByGroup[type].push(stat);				}				else				{					buildingsByGroup[type].push(stat);				}			}						for(var i:int = 0; i < buildings.length; i++)			{				var building:Building = Building(buildings[i]);				var stat:BuildingStat = building.getBuildingStat();				var type:String = stat.type;								trace("City - buildingsByGroup[type]: " + buildingsByGroup[type]);								trace(buildingsByGroup[type].length)				var group = buildingsByGroup[type];								trace(group.length);				for(var j:int = 0; j < group.length; j++)				{					trace(group[j])					var groupStat:BuildingStat = BuildingStat(group[j])										if(stat.level >= groupStat.level)					{						trace("Stat greater than groupStat");						group.splice(j,1)					}				}			}						for(var type in buildingsByGroup)			{				var group = buildingsByGroup[type];				var stat:BuildingStat = BuildingStat(group[0]);								availableBuildings.push(stat);						}						return availableBuildings;		}				public function getAvailableTileImprovements() : Array		{			var available:Array = Stats.INSTANCE.getAvailableImprovements();						/*switch(tileType)			{				case Tile.MOUNTAIN:					improvements.push(Improvement.MINE);					improvements.push(Improvement.QUARRY);					break;				case Tile.FOREST:					improvements.push(Improvement.LUMBERMILL);					improvements.push(Improvement.TRAPPER);					break;				case Tile.PLAINS:					improvements.push(Improvement.FARM);					break;				case Tile.SWAMP:					improvements.push(Improvement.			}*/			return available;		}		public function setCityInfo(cityInfo:InfoCity):void		{			trace("City - setCityInfo");			cityName = cityInfo.name;			taxCommoner = cityInfo.taxCommoner;			taxNoble = cityInfo.taxNoble;			taxTariff = cityInfo.taxTariff;			setBuildings(cityInfo.buildings);			setUnits(cityInfo.units);			setClaims(cityInfo.claims);			setImprovements(cityInfo.improvements);			setAssignments(cityInfo.assignments);			setItems(cityInfo.items);			setPopulations(cityInfo.populations);			setContracts(cityInfo.contracts);		}		private function setBuildings(buildingsInfo:Array):void		{			buildings.length = 0;			for (var i:int = 0; i < buildingsInfo.length; i++)			{				var building:Building = new Building();								building.id = buildingsInfo[i].id;				building.hp = buildingsInfo[i].hp;				building.type = buildingsInfo[i].type;								buildings.push(building);			}		}				private function setUnits(unitsInfo:Array ):void		{			units.length = 0;			for (var i:int = 0; i < unitsInfo.length; i++)			{				var unit:Unit = new Unit();				var unitPacket:UnitPacket = UnitPacket(unitsInfo[i]);				unit.id = unitPacket.id;				unit.recipeId = unitPacket.recipe_id;				unit.size = unitPacket.size;				unit.unitName = unitPacket.name								for(var j:int = 0; j < unitPacket.gear.length; j++)				{					unit.gear.push(unitPacket.gear[j]);				}								for(var j:int = 0 ; j < unitPacket.items.length; j++)				{					var item:Item = new Item();										item.id = unitPacket.items[j].id;					item.ownerType = unitPacket.items[j].ownerType;					item.ownerId = unitPacket.items[j].ownerId;					item.type = unitPacket.items[j].type;					item.template = unitPacket.items[j].template;					item.volume = unitPacket.items[j].volume;														unit.items.push(item);				}								unit.parentEntity = this;				units.push(unit);			}			trace("units; " + units.length);		}		private function setClaims(claimsInfo:Array):void		{			claims.length = 0;			for (var i:int = 0; i < claimsInfo.length; i++)			{				var claim:Claim = new Claim();				claim.id = claimsInfo[i].id;				claim.tileIndex = claimsInfo[i].tileIndex;				claim.cityId = claimsInfo[i].cityId;				claim.state = claimsInfo[i].state;				trace("claim state: " + claim.state);				claims.push(claim);			}		}				private function setImprovements(improvementsInfo:Array) : void		{			improvements.length = 0;						for(var i = 0; i < improvementsInfo.length; i++)			{				var entity:Entity = PerceptionManager.INSTANCE.getEntity(improvementsInfo[i].id);												improvements.push(Improvement(entity));							}		}				private function setAssignments(assignmentsInfo:Array) : void		{			assignments.length = 0;						for(var i = 0; i < assignmentsInfo.length; i++)			{				var assignment:Assignment = new Assignment();								assignment.id = assignmentsInfo[i].id;				assignment.caste = assignmentsInfo[i].caste;				assignment.race = assignmentsInfo[i].race;								assignment.amount = assignmentsInfo[i].amount;				assignment.targetId = assignmentsInfo[i].targetId;				assignment.targetType = assignmentsInfo[i].targetType;								assignments.push(assignment);			}		}				private function setItems(itemsInfo:Array) : void		{			items.length = 0;						trace("City - itemsInfo.length: " + itemsInfo.length);						for(var i = 0; i < itemsInfo.length; i++)			{				var item:Item = new Item();								item.id = itemsInfo[i].id;				item.ownerType = itemsInfo[i].ownerType;				item.ownerId = itemsInfo[i].ownerId;				item.type = itemsInfo[i].type;				item.template = itemsInfo[i].template;				item.volume = itemsInfo[i].volume;								items.push(item);			}		}				private function setPopulations(populationsInfo:Array) : void		{			populations.length = 0;						trace("City - populationsInfo.length: " + populationsInfo.length);						for(var i = 0; i < populationsInfo.length; i++)			{				var population:Population = new Population();				population.cityId = populationsInfo[i].cityId;				population.caste = populationsInfo[i].caste;				population.race = populationsInfo[i].race;				population.value = populationsInfo[i].value;								populations.push(population);			}		}				private function setContracts(contractsInfo:Array) : void		{			contracts.length = 0;						trace("City - contractsInfo.length: " + contractsInfo.length);						for(var i = 0; i < contractsInfo.length; i++)			{				var contract:Contract = new Contract();								contract.id = contractsInfo[i].id;				contract.cityId = contractsInfo[i].cityId;				contract.type = contractsInfo[i].type;				contract.targetType = contractsInfo[i].targetType;				contract.targetId = contractsInfo[i].targetId;				contract.objectType = contractsInfo[i].objectType;				contract.production = contractsInfo[i].production;				contract.createdTime = contractsInfo[i].createdTime;				contract.lastUpdate = contractsInfo[i].lastUpdate;											contracts.push(contract);			}		}				private function hasContract(improvement:Improvement) : Boolean		{			for(var i:int = 0; i < contracts.length; i++)			{				var contract:Contract = Contract(contracts[i]);								if(contract.targetId == improvement.id)				{					return true;				}			}						return false;		}				private function timerHandler(e:TimerEvent):void		{		}	}}